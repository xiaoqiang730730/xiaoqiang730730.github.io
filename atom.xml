<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端-小强</title>
  <icon>https://www.gravatar.com/avatar/2d41a58ad4f670d24ccacb124af9cc7c</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://xiaoqiang730730.github.io/"/>
  <updated>2019-03-31T08:10:46.000Z</updated>
  <id>http://xiaoqiang730730.github.io/</id>
  
  <author>
    <name>前端-小强</name>
    <email>838871837@qq.com</email>
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>怎么找工作，怎么找到工作，怎么找到满意工作？</title>
    <link href="http://xiaoqiang730730.github.io/3016/08/14/works/"/>
    <id>http://xiaoqiang730730.github.io/3016/08/14/works/</id>
    <published>3016-08-14T13:29:43.000Z</published>
    <updated>2019-03-31T08:10:46.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多人在找工作的过程中，总是碰壁，在<a href="https://xiaoqiang730730.github.io/2016/08/01/致现在的我-2016/">之前一篇文章中</a>讲述了我的一些个人经历。我是个普通的人，而我相信很多人都跟我一样，不是那么的有才华，也不是那么的笨，所以我的经历应该更普众化。还有就是找工作是个漫长的过程，不要急、不要急、不要急、不要急。</p><h1 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h1><p>简历非常非常非常非常重要，是获得面试机会的唯一途径。因为在别人不了解你的情况下，只能通过简历来看你的个人能力了。很多时候，面试官看简历比较简单，直接pass，连面试机会都没有，更不用说后面的事情了。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552143438578-4df54de3-aa26-4010-931a-27c8d39adf63.png" alt=""></p><p>多花点时间，让自己的简历足够亮起来。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1553874888567-e0848812-4184-4e84-ab52-10e6ac4d74dc.png" alt=""></p><p><span style="font-weight:bold;color:#f00;font-size:25px;">简历是自己的名片，是自己展示才华的地方。</span></p><h2 id="简历命名"><a href="#简历命名" class="headerlink" title="简历命名"></a>简历命名</h2><p>遵循的格式是 <span style="font-weight:bold;color:#f00;font-size:25px;"><span>姓名_职位名称_工作年限.pdf</span></span></p><p>这是第一点很重要，很多人直接就是简历2个字，太简单随意了。</p><h2 id="简历格式"><a href="#简历格式" class="headerlink" title="简历格式"></a>简历格式</h2><p>网上有各种各样的格式，都是可以的。但是有些不认真的同学直接从某些招聘网站下载word简历，<strong>里面头部和底部都是网站的广告</strong>，这就会给人一种随意的感觉。</p><p>还有就是有些同学用word打开后，简历格式乱掉的，还有乱码。要是公司没那么缺人的话，那就在考验人事的耐心了，还得把格式调整调整才能打印出来。这里我就吐槽下下，之前收到某些同学的简历，就有word打开后乱的情况，要不是感觉内容还可以，就懒的内推了。</p><p>最好使用<font style="font-weight:bold;color:#f00;font-size:25px;">pdf</font>格式，这样都能兼容。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1553875102229-4d6ed314-7a60-4b5f-8b85-46921fd76a08.png" alt=""></p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>之前做的都是架子，内容很重要。比如同学找我内推、或者帮忙推倒其他公司，我都会比较看重内容，毕竟是做技术的，不是很在意那些架子。但是有些同学社招直接投简历，有可能看到简历的第一个人就是人事了，前面说的架子太差的话，很容易就pass了。所以还是多花点时间，多多总结。<br>一个简历的内容可以写的东西很多，主要有以下几点</p><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>个人信息的基本介绍：姓名、年龄、地址、联系方向、证件照等。尤其是在你求职期间联系方式一定不要换，保持联系通畅。</p><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a><font style="font-weight:bold;color:#f00;font-size:25px;">项目</font></h3><p>经历过的项目内容，简单的描述一下项目，<strong>更多的是要表达出从项目中学到了什么？遇到了什么问题？怎么解决的？能够说好这几个问题，一定是个很漂亮的简历。</strong></p><p><span style="font-weight:bold;color:#f00;font-size:25px;">不要写成工作职责</span>不要写成工作职责不要写成工作职责</p><p><span style="font-weight:bold;color:#f00;font-size:25px;">挑自己熟的项目</span> 有些工作时间长的，项目太多了，挑近期有意义的项目</p><p>举例1：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1550906983239-510a5c53-2995-4d71-8987-1ebe857712df.png" alt=""></p><p>项目描述要精简，一般项目名称就清楚是个什么项目了。比如这个说是管理系统，那情况大体上面试官就知道了。</p><p>个人职责写成了工作职责，都是在说使用工具。当然博主承认一些公司需要这样标识，但是能力强的同学，会转变方向。</p><p>以<strong>我为中心</strong>视角，可以改成，我负责了什么，起到了什么作用；我做了性能优化的，具体带来多少提升；我抽离了组件，业务提供了多少效率。</p><p>这样去总结，至少简历你已经比别人突出了，更能获得面试机会。</p><p>举例2：</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1553175902036-a33a62ce-7133-47c6-863c-020839235be5.png" alt=""></p><p>项目就直接是XXXApp，没有过多的废话介绍业务，预留了链接，可以方便他人进一步了解。</p><p>简单介绍技术栈之后，很关键的是有总结性的亮点，并提供了链接，方便进一步去详细了解。</p><p>举例3：</p><blockquote><p>James Gosling, The father of Java.</p></blockquote><p>这类人的简历，就是自己的名字，已经在业界大名鼎鼎。</p><h3 id="专注职位内容"><a href="#专注职位内容" class="headerlink" title="专注职位内容"></a>专注职位内容</h3><p>对于一些应届生而言，可能不知道自己要做啥，就像当年的自己一样，就会写一个很是通用的简历，然后去海投。这是个非常不好的现象。比如投前端工程师，但是之前做的是Java，不能把做的Java项目，在简历里面无限的放大，整个简历就好像是投Java工程师似的，只能放到最后作为一个点睛的效果。</p><h3 id="页数"><a href="#页数" class="headerlink" title="页数"></a>页数</h3><p>简历页数不宜太多，顶多2页了，一般也就1页。</p><h3 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h3><p>很多网站会让同学填个技能，很多同学就会选择掌握程度熟练等。这种就很傻，谁敢自己保证自己能熟练掌握一个东西呢？就像一个简单的代码，在不同的环境中就会出现问题，就变成bug了。所以认真的考虑自己的技能，因为面试官会看到你写的，就会一直追你的屁股问到底，能够问死你。o(╯□╰)o</p><h3 id="我的职业定位？"><a href="#我的职业定位？" class="headerlink" title="我的职业定位？"></a><font style="font-weight:bold;color:#f00;font-size:25px;">我的职业定位</font>？</h3><p>前面的内容一般对于有经验的同学，大概就能很好理解，也就能更好的梳理自己的一些发展方向。但是应届生或者是说学生而言，其实是很迷茫的，根本不知道自己要走什么样的发展方向。博主之前也是这样子，感觉自己什么都想去做，有感觉自己什么都不会做。博主觉得这很正常，这就说明我们都是普通的。那为什么有些人很早就确定了自己的方向，就朝着自己方向一直学习下去。那是因为他们已经把自己的职业提前了，提前去了解整个行业，提前去学习自己感兴趣的知识，提前为自己的职业在做准备了。</p><h3 id="职业规划？"><a href="#职业规划？" class="headerlink" title="职业规划？"></a><font style="font-weight:bold;color:#f00;font-size:25px;">职业规划</font>？</h3><p>很多人都会为自己的人生做些规划。博主认为这些规划是必要的。比如说学生期间规划是找准自己的方向，为毕业后找工作做知识储备。这就是个规划。还有很多人在工作中，也是会有自己的规划。但是博主觉得规划始终是个计划，很多时候计划赶不上变化。而且不一定自己的一些观点说不定就会被别人改变。所以说规划要有，但要学会这去调整规划。</p><h3 id="项目没啥内容可写？"><a href="#项目没啥内容可写？" class="headerlink" title="项目没啥内容可写？"></a><font style="font-weight:bold;color:#f00;font-size:25px;">项目没啥内容可写</font>？</h3><p>这个问题是很多学生向博主反映的。其实这个问题换个角度就可以很好解答了。是不是没有项目才导致没有内容写呢？或者说项目没有自己一步一步搭起来，从而没收获呢？可推荐一下几种方式来扩展自己的项目经验。</p><ol><li><p>参加一些学校的项目。很多同学一开始都不在意这个，觉得很无所谓。其实很多时候都是这种小的项目，小的比赛，一点一点积累起来的，没有人一开始就会的。毕竟工科更多的是靠实践才能慢慢体会的。</p></li><li><p>有些同学是学其他专业的，然后对另一个专业敢兴趣。然后想<font style="font-weight:bold;color:#f00;font-size:25px;">转行</font>，但是又没有什么实践经历。这里博主可以建议跟之前一样去了解这个行业啊，因为其实很多本专业的同学也不怎么了解本专业，也是个空白。︿(￣︶￣)︿</p></li><li><p>自己学习有点累，怎么办？学校里很多老师都有项目，可以跟着老师后面做项目嘛。博主觉得这是最好了！要是没有找到老师那可以咋办呢？其实每个人都有毕设吧！很多同学都是要大四最后，随意糊弄下毕设就过了，只追求一个过的心态。其实可以在大二大三就跟某些老师商量下，提前订好课题，然后可以去追求一个优秀的毕设。这样毕设就很大了，不是一个大四末几个月就能搞定的，而且完成一个优秀的毕设，够自己忙活的了，也够自己在项目经历中表现了。</p></li></ol><p>ps:作为工科的话，很多课程都有课程设计的，很多同学不当回事。因为过了很容易，拿到优就很难。但是现在很多公司都是看动手能力的，嘴上说说是没有用的。每个专业课的课程设计就可以一点一点的培养自己的动手能力。而在工作中开发跟课设很像，都有很多前提条件，需要完成什么样子，也都有一个开发时间。而二者最大的不同就是<font style="font-weight:bold;color:#f00;font-size:25px;">课设可以及格，工作只能完美</font>。</p><p>ps2: 有同学反映，很多时候老师不够重视课设，也不提供些指导。博主也是从学生时代过来的，到现在就记得一个课设，做的还可以，其它的都忘了，一点印象都没有。博主觉得这里面的关键就是很多课程都只注重理论，不够注重实践。</p><p>博主觉得课设时间可以长一点，甚至是一半的教学时间，这样才能真正理解理论，并能自己实践。博主建议同学可以自己组织起来，可以请学长学姐帮忙！</p><p>总之多花点时间准备准备简历，当你觉得简历没有啥内容可以写的时候，说明还需再锻炼锻炼，此时更不能急躁，否则更多的是碰壁。</p><p>总之最终 简历就是等于自己，简历拿出去展示，问心无愧。</p><h1 id="投简历"><a href="#投简历" class="headerlink" title="投简历"></a>投简历</h1><p>很多同学投简历会有石沉大海的感觉，真的像在大海捞针。<img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1550938718157-a70be918-f786-4991-8fb3-0f0249b089cd.png" alt="enter description here"></p><p>还要注意投简历时机。博主之前在大四时错过了各大公司的校招，很是可惜。虽然在毕业后还厚着脸皮去参加bat的校招，当时投的是应届生，虽然at过了笔试，但还是在第一轮面试就被刷了，就是准备的不到位啊。</p><h2 id="校招"><a href="#校招" class="headerlink" title="校招"></a>校招</h2><p>校招应该是11月份和4月，比较密集，大三学生可以提前关注下，提前做好准备。因为校招相对于社招容易些，机会也很多。而且考研的同学也要关注下，毕竟考研不是最终的目的。</p><h2 id="内推"><a href="#内推" class="headerlink" title="内推"></a>内推</h2><p>其实不管社招还是校招，都可以跟公司的内部人员推荐一下，毕竟走简历系统是要慢点的。而且一般内推都是行业的人，可以的话，可以让别人<strong>提点建议</strong>来改进自己。有些公司毕竟门槛在那边，可能自己达不到，但是可以跟别人做些简单的交流，让自己可以朝着哪些方向去弥补自己的不足。</p><h2 id="怎么内推呢？"><a href="#怎么内推呢？" class="headerlink" title="怎么内推呢？"></a>怎么内推呢？</h2><p>内推关键是要去找人，套个近乎。(^o^)/~ 但是关键怎么去套近乎呢！</p><ol><li><p>阿里内推<br><a href="http://xiaoqiang730730.github.io/neitui/">查看内推流程</a></p></li><li><p>参加一些线下活动<br>在北京上海活动很多，有些公司会组织一些沙龙分享啥的，可以关注下，有经济能力情况下可以去参加参加，学习学习。之前就遇到某个同学，到线下一个活动专门找某位大牛，重新介绍自己。因为他投的简历一直没回应，但是他通过这种方式，争取到了一次面试的机会。所以在没有机会的时候，就要自己去创造一些机会。↖(^ω^)↗</p></li><li><strong>微博</strong><br>之前博主就是通过微博找到工作的。<img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1550938394834-c569684e-6d94-4fba-ac16-279faa2bd5b0.png" alt="enter description here"><br>为什么我会推荐这种方式呢？因为在不同的行业中，做的不错的人就那么些了，关注他们其实也就关注行业的一些动态和一些行情了。而且在公司急需人的时候，一般大牛都会在微博中发招聘广告啥的，这个时候，可以私信大牛，都会有一些交流机会，甚至能去大牛的公司，跟着大牛学习。<br>说了这么多，我就自己打个广告好了，关注 <font style="font-weight:bold;font-size:25px;"><a href="https://weibo.com/smallwall520" target="_blank" rel="noopener">我微博:前端-小强</a></font>，美好的事情一直会发生。</li><li>技术群<br>很多小白的经历，都会加入一些技术群，来学习技术。但是现在很多群都很水了，没有一个正在讨论技术的环境，不过博主最近加入了infoQ的技术群，感觉还不错，大家感兴趣的可以申请加入进去。<a href="/images/wechat.jpeg">微信群，加好友y838871837，备注博客</a></li></ol><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><p>通过之前的一些准备，很多情况下都能获得面试的机会。</p><h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><p>很多公司会有一些笔试，有些同学会问笔试都考些啥？博主就分享下当年bat的校招笔试。</p><ol><li><p>腾讯笔试<br>之前不知道怎么稀里糊涂的报了个测试工程师, 博主认为当时是醉了。前2天晚上收到了信息，意思是在上海交大哪个教室参加测试笔试。博主当时就很懵逼啊，一点准备都没有啊。<br>具体说下笔试内容，依稀记得考的还是组员、数据结构、计算机网络、操作系统这几个主要科目的内容，测试专业好像没遇到。没想到稀里糊涂的进了1面，现在就记得手写了个冒泡算法，其它的都记不得了，然后挂了，具体原因也不清楚。o(╯□╰)o</p></li><li><p>百度笔试<br>这是博主厚着脸皮报的前端工程师，因为当时已经毕业了，算是应届生。记得百度好像是在上海复旦笔试的。百度的笔试内容确实是跟前端相关的，手写代码和一些伪代码，现在还有印象就是用css画个三角形。<br>博主感觉答的也是稀里糊涂的，但是就是过了。然后是1面，对方应该是个1-2年的工程师来面的。面了很多前端基础性问题，当时前端工作是顺手做的，是个半吊子，也就很自然的挂了。</p></li><li><p>阿里巴巴笔试<br>博主当年不知道是不是脑子抽了，竟然报了个数据挖掘工程师岗位，然后在线笔试题目全是算法题，蒙圈，就这么挂了。</p></li><li><p>其它公司<br>有些公司也会让招聘者先做个笔试题，很俗。这些题目网上都有，而且小公司也没必要吧，直接面试就好了。</p></li></ol><p>好像现在bat都是在线笔试，一般都是简单的筛选。重点还是后面的几轮面试吧。</p><h2 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h2><p>一般会自己带一份简历，防止面试官弄丢了简历，当然这种情况也比较少。</p><p>面试一定要对自己的简历里面的内容要熟，这很重要。面试官一般情况下会根据内容和你一起探讨探讨问题。</p><p>之前有人建议衣着要穿的很正经，但我觉得吧，做技术这行，穿着不是很看重，不要太邋遢就可以了。</p><h2 id="面试心态"><a href="#面试心态" class="headerlink" title="面试心态"></a>面试心态</h2><p>其实要摆正一个很重要的心态，一个求职者应该抱着学习的心态来面试，即使自己很牛逼，也不要用自己能牛的技能，反过来给面试官难堪。也吐槽下下，面试官也不要一直追着问，也要抱着一种别人不会，也给别人一些指导的心态。因为求职者也许现在能力不行，不代表以后不行，留个好印象。</p><p>其实面试是个相互交流的过程，相互学习的过程，也是相互选择的过程。</p><h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><ol><li>自我介绍</li></ol><p>用几句话，简单的自我介绍下。很多人其实没怎么在意，但是自我介绍其实是非常有必要的。就相当于跟一个陌生人介绍自己，很多同学没有过经验。就会在第一次面试的时候，自我介绍都吞吞吐吐的。</p><ol start="2"><li>面试交流</li></ol><p>这部分是整个面试的主体。包括面试官对个人项目经历的了解，以及基础知识的了解。一般情况下是通过交流，一问一答的模式。有些面试官会板书，写些思路出来。</p><p>面试官通常会通过简历里面的内容做些提问和探讨。如果写的内容很少，那就给面试官很大的面试范围了。而且一旦是自己弱的知识点，那不就坑逼了么！这就能体现前面准备内容的重要性。</p><ol start="3"><li>面试最后</li></ol><p>一般面试官都会问: ‘你有问题问我吗？’。其实这是个客套话。可以问问公司的发展啊，公司的文化啥的！最近听见了一个挺好笑的问题就是： ‘我刚才的表现能过吗？’类似这种问题就不要问了啊。o(╯□╰)o</p><h2 id="面试结果"><a href="#面试结果" class="headerlink" title="面试结果"></a>面试结果</h2><p>之前博主的面试经历，结果有好也有坏。我们得从失败的面试中，吸取一些面试教训，比如自己的知识储备还不够等，然后在下一次的面试中表现好。</p><h2 id="offer选择"><a href="#offer选择" class="headerlink" title="offer选择"></a>offer选择</h2><p>有些同学面试很不错，能拿到好几个offer。这个时候就会有困扰，到底选哪个？</p><p>其实说实话，这个问题也不是问题，自己的心理也是有个数了，只不过存在某些方面还不够完美。那就很好办，既然觉得还不够满意，那就继续再找找，多花点时间补充自己。最终还是取决于，自己想成为什么样的人，自己想怎么去规划未来的路的。</p><p>博主个人建议，不要太将就。从博主自我经历来看，找到自己满意的，会对未来的职业道路少走很多年。一旦将就了，其实你这次的跳槽也就意味着，并没有太大的提高，过1-2年还是会继续跳槽。</p><h2 id="offer后？"><a href="#offer后？" class="headerlink" title=" offer后？"></a><strong> <font style="font-weight:bold;color:#f00;font-size:25px;">offer后</font></strong>？</h2><p>这个问题应该是事后的事情了。有些同学反应去了新公司几天后，发现跟自己的<strong>预期很不相同</strong>。心里会在挣扎，’怎么办呢？’。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1550935568688-01632b5a-1a36-49bf-a8e3-ed9b58bc2cc0.png" alt=""></p><p>这时很多同学就会有个想法，那就是走。这样会导致<strong>频繁的跳槽</strong>，给以后HR留下吐槽的借口。那又该怎么办呢？</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们在选择一家公司的时候会看什么呢？还是只是将就随便找个工作呢？博主觉得找工作会看一下几点</p><ul><li>薪资<br>这个不用说，博主相信每个人都会从这个方面考虑，也是主要因素。 </li><li>能力<br>公司能不能够够自我成长，还是只是做些很普通的事。</li><li>文化<br>公司的文化氛围，舒适度，能不能工作的很开心。</li></ul><p>博主个人认为没有多少经验的同学，会更多看重第2点，为了自我的成长，现在的薪资够生活就行。而且一般企业不会说连基本生活的费用都给不了。而有些能力的同学，可能会在薪资和企业文化比较看重，因为去这公司就是施展自己的才能，为公司创造更多价值，而拿到更多报酬的。这仅仅是博主个人的一些观点，毕竟也是经历过几家公司的。</p><h3 id="解决？"><a href="#解决？" class="headerlink" title="解决？"></a>解决？</h3><p>那这种问题要如何解决呢？</p><p>博主想了想，其实有几种方法解决。</p><ul><li>其实在面试的时候，从几轮面试接触，大概能对公司有些了解，能对公司的做事程度，技术水平，大大小小都会有了解。最直接感受，面试结束后，自己回顾下面试过程，看看自己有没有收获。</li><li>可以到职业平台，问问离开公司的员工，他们的评价应该是最值得考虑的。</li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>其实每次找工作都是很累的事情，少则几个月，多则半年多的准备时间。用心去准备，用心去找工作，一步一步实现自己的目标。大家加油。</p><p>其实说了这么多，只是博主的一些个人感受了，毕竟大家每个人都是不一样的个体，都是不一样的烟火。大家加油，一起成长。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/gif/103994/1550939264637-14d17eb1-b567-45a3-ad19-8812ffe87a2b.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多人在找工作的过程中，总是碰壁，在&lt;a href=&quot;https://xiaoqiang730730.github.io/2016/08/01/致现在的我-2016/&quot;&gt;之前一篇文章中&lt;/a&gt;讲述了我的一些个人经历。我是个普通的人，而我相信很多人都跟我一样，不是那么的有才华
      
    
    </summary>
    
      <category term="总结" scheme="http://xiaoqiang730730.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="杂谈" scheme="http://xiaoqiang730730.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>rem布局，安卓transform，页面抖动</title>
    <link href="http://xiaoqiang730730.github.io/2019/08/11/transform-rem/"/>
    <id>http://xiaoqiang730730.github.io/2019/08/11/transform-rem/</id>
    <published>2019-08-11T04:12:01.000Z</published>
    <updated>2019-08-18T16:09:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>背景：<br>博主最近做了个动画，在安卓机上有些抖动，直接看效果图。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/gif/103994/1566139502311-a5be8a95-33b4-47a5-a1ad-09dc779241c9.gif" alt=""></p><h1 id="rem布局"><a href="#rem布局" class="headerlink" title="rem布局"></a>rem布局</h1><p>为了适配移动端，采用rem进行布局，设计稿统一采用750大小，这样方便各个机型适配。</p><h2 id="适配方法"><a href="#适配方法" class="headerlink" title="适配方法"></a>适配方法</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement.style.fontSize = (<span class="number">100</span> * <span class="built_in">document</span>.documentElement.clientWidth / <span class="number">750</span>) + <span class="string">"px"</span>;</span><br></pre></td></tr></table></figure><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>安卓精度问题。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1566140779970-c9a1ffae-f8a0-45f6-ae02-12d646a6712b.png?x-oss-process=image/resize,w_1492" alt=""></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.hot</span>&#123;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">0.18rem</span>;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">0.18rem</span>;</span><br><span class="line"><span class="attribute">border-radius</span>: .<span class="number">09rem</span>;</span><br><span class="line"><span class="attribute">background-color</span>: <span class="number">#ff0000</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然看似代码是个圆，但是由于是rem动态计算相对值，就会出现小数点情况。</p><blockquote><p><a href="https://fed.taobao.org/blog/2015/11/05/mobile-rem-problem/" target="_blank" rel="noopener">浏览器在渲染时所做的舍入处理只是应用在元素的渲染尺寸上，其真实占据的空间依旧是原始大小</a>。</p></blockquote><blockquote><p><a href="https://fed.taobao.org/blog/2015/11/05/mobile-rem-problem/" target="_blank" rel="noopener">也就是说如果一个元素尺寸是 0.625px，那么其渲染尺寸应该是 1px，空出的 0.375px 空间由其临近的元素填充；同样道理，如果一个元素尺寸是 0.375px，其渲染尺寸就应该是 0，但是其会占据临近元素 0.375px 的空间</a>。</p></blockquote><p>这也就会导致我们有些情况下画不圆了，对于这种情况直接设置px解决。</p><h2 id="那么transform抖动问题？"><a href="#那么transform抖动问题？" class="headerlink" title="那么transform抖动问题？"></a>那么transform抖动问题？</h2><p>回到之前动效，次动效存在2个，第一个item离开，以及第二个item进入。然后不断循环。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1566142799053-7a7b4ceb-b6c7-4c2d-b25d-6039b51b81f8.png" alt=""></p><p>按照这个思路，当进行到第二帧的时候，item2和上一帧的item2应该正好重合，但是安卓机上出现抖动。</p><iframe src="http://xiaoqiang730730.github.io/resources/demo/tranform/index.html"></iframe><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>可视高度2.26rem，通过transform将item2偏移2.26rem，由于安卓上存在小数点精度问题，将item2进行偏移2.26rem，不一定能够和可视区域重合。也就会导致了，在进行第二帧的时候，会有抖动效果。</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1566144009438-3aa70dd8-923f-415b-9b89-e2d98cec6403.png" alt=""></p><p>既然无法重合，那就初始化的时候统一进行transform偏移，这样第一帧和第二帧之间都是通过transform进行吻合重合。</p><p>也就是transform偏移2.26rem不一定等于2.26rem，但是一定等于另一次的transfrom同样的2.26rem距离。</p><iframe src="http://xiaoqiang730730.github.io/resources/demo/tranform/index2.html"></iframe><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/" target="_blank" rel="noopener">深入理解CSS中的层叠上下文和层叠顺序</a></li><li><a href="https://fed.taobao.org/blog/2015/11/05/mobile-rem-problem/" target="_blank" rel="noopener">rem 产生的小数像素问题</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;背景：&lt;br&gt;博主最近做了个动画，在安卓机上有些抖动，直接看效果图。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2019/gif/103994/1566139502311-a5be8a95-33b4-47a5-a1ad-0
      
    
    </summary>
    
    
      <category term="css" scheme="http://xiaoqiang730730.github.io/tags/css/"/>
    
  </entry>
  
  <entry>
    <title>babel-plugin</title>
    <link href="http://xiaoqiang730730.github.io/2019/03/31/babel-plugin/"/>
    <id>http://xiaoqiang730730.github.io/2019/03/31/babel-plugin/</id>
    <published>2019-03-31T08:13:48.000Z</published>
    <updated>2019-03-31T11:09:42.000Z</updated>
    
    <content type="html"><![CDATA[<p>babel插件开发</p><blockquote><p>babel 插件手册 <a href="https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md" target="_blank" rel="noopener">https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-handbook.md</a></p></blockquote><blockquote><p>bable 插件开发入门 <a href="https://www.zcfy.cc/article/understanding-asts-by-building-your-own-babel-plugin" target="_blank" rel="noopener">https://www.zcfy.cc/article/understanding-asts-by-building-your-own-babel-plugin</a></p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>babel插件开发虽然网上有很教程，但是轮到自己开发的时候还是很头疼，所以就把一些常用的例子，列举下来，通过例子快速学习。</p><h1 id="增"><a href="#增" class="headerlink" title="增"></a>增</h1><h1 id="删"><a href="#删" class="headerlink" title="删"></a>删</h1><h1 id="改"><a href="#改" class="headerlink" title="改"></a>改</h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;babel插件开发&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;babel 插件手册 &lt;a href=&quot;https://github.com/jamiebuilds/babel-handbook/blob/master/translations/zh-Hans/plugin-h
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>利用Vue，APICloud从无到有实现一个App</title>
    <link href="http://xiaoqiang730730.github.io/2018/08/12/app/"/>
    <id>http://xiaoqiang730730.github.io/2018/08/12/app/</id>
    <published>2018-08-12T13:01:12.000Z</published>
    <updated>2018-09-24T06:27:47.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">Vue 是一套用于构建用户界面的渐进式框架</a></p></blockquote><blockquote><p><a href="https://docs.apicloud.com/APICloud/platform-intro" target="_blank" rel="noopener">APICloud混合开发技术 快速开发App</a></p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>最近有个新项目需要做过App，但是介于团队人员配置，以及时间紧凑，采用了Vue + APICloud 结合技术快速开发一个<a href="https://static2.kuaimai.com/app.html" target="_blank" rel="noopener">App</a>(<a href="https://itunes.apple.com/cn/app/%E5%BF%AB%E9%BA%A6%E9%92%B1%E5%8C%85/id1380653871?mt=8" target="_blank" rel="noopener">AppStore</a>)。</p><p>一切都是从0开始，经历了前期的开发、App上架、App推送、App推广等。</p><p>做了些总结</p><ul><li><a href="https://xiaoqiang730730.github.io/vue_apicloud/oneweekoneapp.html">前期一周一App</a></li><li><a href="https://xiaoqiang730730.github.io/vue_apicloud/push.html">App推送</a></li><li><a href="https://xiaoqiang730730.github.io/vue_apicloud/appstore.html">App上架</a></li><li><a href="https://xiaoqiang730730.github.io/vue_apicloud/share.html">App在微信端分享</a></li></ul><p><a href="https://github.com/xiaoqiang730730/vue_apicloud" target="_blank" rel="noopener">并将vue-cli 和 apicloud-cli 结合起来，便于开发。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://cn.vuejs.org/v2/guide/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue 是一套用于构建用户界面的渐进式框架&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockqu
      
    
    </summary>
    
    
      <category term="Vue" scheme="http://xiaoqiang730730.github.io/tags/Vue/"/>
    
      <category term="APICloud" scheme="http://xiaoqiang730730.github.io/tags/APICloud/"/>
    
  </entry>
  
  <entry>
    <title>fetch+node实现上传图片</title>
    <link href="http://xiaoqiang730730.github.io/2018/06/21/upload/"/>
    <id>http://xiaoqiang730730.github.io/2018/06/21/upload/</id>
    <published>2018-06-21T11:27:16.000Z</published>
    <updated>2019-03-31T07:53:05.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="图片上传"><a href="#图片上传" class="headerlink" title="图片上传"></a>图片上传</h1><p>最近给设计妹妹搞了模板上传功能，里面涉及到了图片上传功能。</p><h2 id="input"><a href="#input" class="headerlink" title="input"></a>input</h2><p>在前端涉及到图片上传，都会用到input标签，监听onchange事件，可以拿到file文件</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"file"</span> <span class="attr">accept</span>=<span class="string">".png"</span> <span class="attr">class</span>=<span class="string">"input_file"</span> /&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> file = <span class="built_in">document</span>.getElementsByClassName(<span class="string">'input_file'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">file.onchange = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.files);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.files.length) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> file = <span class="keyword">this</span>.files[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> formData = <span class="keyword">new</span> FormData();</span><br><span class="line"></span><br><span class="line">    formData.append(<span class="string">'picture'</span>, file);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>利用formData可以把二进制数据传输给后端。</p><h2 id="fetch"><a href="#fetch" class="headerlink" title="fetch"></a>fetch</h2><p>由于是内部项目直接使用fetch</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ajaxImg = <span class="function">(<span class="params">url, params = &#123;&#125;</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> fetch(url, &#123;</span><br><span class="line">            credentials: <span class="string">'include'</span>,</span><br><span class="line">            method: <span class="string">'POST'</span>,</span><br><span class="line">            headers: &#123;</span><br><span class="line">                <span class="string">'Content-type'</span>: <span class="string">'multipart/form-data;'</span></span><br><span class="line">            &#125;,</span><br><span class="line">            body: params</span><br><span class="line">        &#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> res.json())</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>封装一个请求，单独传输图片数据。 在之前onchange里面调用ajaxImg将formData数据发送给后端。</p><h2 id="fetch数据异常"><a href="#fetch数据异常" class="headerlink" title="fetch数据异常"></a>fetch数据异常</h2><p>后端一直没有拿到图片的数据，换成jquery的ajax就可以。</p><p>对比network，发现fetch的request content-type 里面内容少了 boundary=XXXXXXX</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554018728583-a1a415b5-992b-493b-ae06-6e11852c8bde.png" alt=""></p><p>后来发现这个是浏览器的BUG，解决方案就是在请求的时候不需要加content-type。</p><p>这样前端的基本任务就完成了。</p><h2 id="node"><a href="#node" class="headerlink" title="node"></a>node</h2><p>后端使用express来构建服务，解析form-data数据，要用到<a href="https://github.com/expressjs/multer" target="_blank" rel="noopener">multer</a>库</p><p>代码简单如下</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</span><br><span class="line"><span class="keyword">var</span> express = <span class="built_in">require</span>(<span class="string">'express'</span>);</span><br><span class="line"><span class="keyword">var</span> bodyParser = <span class="built_in">require</span>(<span class="string">'body-parser'</span>);</span><br><span class="line"><span class="keyword">var</span> multer = <span class="built_in">require</span>(<span class="string">'multer'</span>);</span><br><span class="line"><span class="keyword">var</span> app = express();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> port = <span class="number">8012</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> storage = multer.diskStorage(&#123;</span><br><span class="line">    destination: <span class="function"><span class="keyword">function</span>(<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">        cb(<span class="literal">null</span>, <span class="string">'./public/img'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    filename: <span class="function"><span class="keyword">function</span>(<span class="params">req, file, cb</span>) </span>&#123;</span><br><span class="line">        cb(<span class="literal">null</span>, <span class="string">`<span class="subst">$&#123;file.originalname&#125;</span>`</span>)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">var</span> upload = multer(&#123; <span class="attr">storage</span>: storage &#125;);</span><br><span class="line"></span><br><span class="line">app.use(bodyParser.json());</span><br><span class="line">app.use(express.static(<span class="string">'public'</span>));</span><br><span class="line"></span><br><span class="line">app.post(<span class="string">'/upload'</span>, upload.single(<span class="string">'picture'</span>), <span class="function"><span class="keyword">function</span>(<span class="params">req, res, next</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(req.file);</span><br><span class="line">    res.json(&#123;</span><br><span class="line">        success: <span class="literal">true</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app.listen(port);</span><br></pre></td></tr></table></figure><h2 id="multer"><a href="#multer" class="headerlink" title="multer"></a>multer</h2><p>借助multer能很快的处理图片问题，但是它是怎么处理的呢？</p><p>multer-&gt; <a href="https://github.com/mscdex/busboy" target="_blank" rel="noopener">busboy</a> -&gt;  <a href="https://github.com/mscdex/dicer" target="_blank" rel="noopener">dicer</a></p><p><code>dicer is A very fast streaming multipart parser for node.js.</code></p><p>所以dicer是其核心，我们尝试直接使用dicer来处理图片。</p><h2 id="dicer"><a href="#dicer" class="headerlink" title="dicer"></a>dicer</h2><p>稍微改改官方的例子</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> inspect = <span class="built_in">require</span>(<span class="string">'util'</span>).inspect,</span><br><span class="line">    http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line">    </span><br><span class="line"><span class="keyword">var</span> Dicer = <span class="built_in">require</span>(<span class="string">'dicer'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// quick and dirty way to parse multipart boundary</span></span><br><span class="line"><span class="keyword">var</span> RE_BOUNDARY = <span class="regexp">/^multipart\/.+?(?:; boundary=(?:(?:"(.+)")|(?:([^\s]+))))$/i</span>,</span><br><span class="line">    HTML = <span class="keyword">new</span> Buffer(<span class="string">'&lt;html&gt;&lt;head&gt;&lt;/head&gt;&lt;body&gt;\</span></span><br><span class="line"><span class="string">                       &lt;form method="POST" enctype="multipart/form-data"&gt;\</span></span><br><span class="line"><span class="string">                         &lt;input type="text" name="textfield"&gt;&lt;br /&gt;\</span></span><br><span class="line"><span class="string">                         &lt;input type="file" name="filefield" accept=".png"&gt;&lt;br /&gt;\</span></span><br><span class="line"><span class="string">                         &lt;input type="submit"&gt;\</span></span><br><span class="line"><span class="string">                       &lt;/form&gt;\</span></span><br><span class="line"><span class="string">                       &lt;/body&gt;&lt;/html&gt;'</span>),</span><br><span class="line">    PORT = <span class="number">8012</span>;</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function"><span class="keyword">function</span> (<span class="params">req, res</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> m;</span><br><span class="line">    <span class="keyword">if</span> (req.method === <span class="string">'POST'</span> &amp;&amp;</span><br><span class="line">        req.headers[<span class="string">'content-type'</span>] &amp;&amp;</span><br><span class="line">        (m = RE_BOUNDARY.exec(req.headers[<span class="string">'content-type'</span>]))) &#123;</span><br><span class="line">        <span class="keyword">var</span> d = <span class="keyword">new</span> Dicer(&#123;</span><br><span class="line">            boundary: m[<span class="number">1</span>] || m[<span class="number">2</span>]</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        d.on(<span class="string">'part'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">p</span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'New part!'</span>);</span><br><span class="line">            p.on(<span class="string">'header'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">header</span>) </span>&#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">var</span> h <span class="keyword">in</span> header) &#123;</span><br><span class="line">                    <span class="built_in">console</span>.log(<span class="string">'Part header: k: '</span> + inspect(h) +</span><br><span class="line">                        <span class="string">', v: '</span> + inspect(header[h]));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">            p.on(<span class="string">'data'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">                fs.writeFileSync(<span class="string">'./test1.png'</span>, data);</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'Part data: '</span> + data);</span><br><span class="line">            &#125;);</span><br><span class="line">            p.on(<span class="string">'end'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">'End of part\n'</span>);</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;);</span><br><span class="line">        d.on(<span class="string">'finish'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'End of parts'</span>);</span><br><span class="line">            res.writeHead(<span class="number">200</span>);</span><br><span class="line">            res.end(<span class="string">'Form submission successful!'</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">        req.pipe(d);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (req.method === <span class="string">'GET'</span> &amp;&amp; req.url === <span class="string">'/'</span>) &#123;</span><br><span class="line">        res.writeHead(<span class="number">200</span>);</span><br><span class="line">        res.end(HTML);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        res.writeHead(<span class="number">404</span>);</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;).listen(PORT, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'Listening for requests on port '</span> + PORT);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p><code>fs.writeFileSync(&#39;./test1.png&#39;, data);</code></p><p>直接在请求数据回调里面保存为图片，发现是能够成功的。</p><p>在这个例子里完全没有express了，那我们尝试下自己来处理下图片数据。</p><h2 id="原生处理"><a href="#原生处理" class="headerlink" title="原生处理"></a>原生处理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8013</span>;</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> url = req.url;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(url.indexOf(<span class="string">'/upload'</span>)&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> strs = <span class="string">''</span>;</span><br><span class="line">        req.on(<span class="string">'data'</span>, (str)=&gt; &#123;</span><br><span class="line">            strs += str;</span><br><span class="line">        &#125;);</span><br><span class="line">        req.on(<span class="string">'end'</span>, ()=&gt; &#123;</span><br><span class="line">            res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">                <span class="string">"success"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;));</span><br><span class="line">            fs.writeFileSync(<span class="string">'./text'</span>, strs);</span><br><span class="line">            res.end();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;).listen(port);</span><br></pre></td></tr></table></figure><p>核心代码如上，这样可以拿到formdata里面所有的数据，可以查看其数据。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554018722251-018b364a-3115-446a-b760-62b7899075c4.png?x-oss-process=image/resize,w_1492" alt=""></p><p>可以发现其数据是通过请求头里面的boundary值进行分割的。</p><p>所以先简单取出boundary值</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> type = req.headers[<span class="string">'content-type'</span>];</span><br><span class="line"><span class="keyword">let</span> boundary = type.split(<span class="string">'boundary='</span>)[<span class="number">1</span>];</span><br></pre></td></tr></table></figure><p>然后进行数据切割<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">strs = strs.split(<span class="string">'--'</span>+boundary + <span class="string">'--'</span>)[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">let</span> forms = strs.split(<span class="string">'--'</span>+boundary + <span class="string">'\r\n'</span>).filter(<span class="function"><span class="params">val</span>=&gt;</span> val);</span><br></pre></td></tr></table></figure></p><p>每块内容区域根据<code>\r\n\r\n</code>和<code>\r\n</code>进行切割，可以将Content-Disposition、Content-Type, 内容区分开来。</p><p>完整代码可以尝试如下<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">const</span> http = <span class="built_in">require</span>(<span class="string">'http'</span>);</span><br><span class="line"><span class="keyword">const</span> port = <span class="number">8013</span>;</span><br><span class="line"></span><br><span class="line">http.createServer(<span class="function">(<span class="params">req, res</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> url = req.url;</span><br><span class="line">    <span class="keyword">let</span> statics = <span class="string">'html#png#js'</span>;</span><br><span class="line">    <span class="keyword">if</span>(url === <span class="string">'/'</span>) &#123;</span><br><span class="line">        url = <span class="string">'/index.html'</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(url.indexOf(<span class="string">'.'</span>)&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> name = url.replace(<span class="regexp">/.*\./gim</span>, <span class="string">''</span>);</span><br><span class="line">        <span class="keyword">if</span>(statics.indexOf(name) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">            res.write(fs.readFileSync(<span class="string">`./public/<span class="subst">$&#123;url&#125;</span>`</span>));</span><br><span class="line">            res.end();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(url.indexOf(<span class="string">'/query'</span>)&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">        res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">            <span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=utf-8;'</span></span><br><span class="line">        &#125;);</span><br><span class="line">        res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">            <span class="string">"216*216"</span>: <span class="string">"./img/216*216.png"</span></span><br><span class="line">        &#125;));</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(url.indexOf(<span class="string">'/upload'</span>)&gt;<span class="number">-1</span>) &#123;</span><br><span class="line">        <span class="keyword">let</span> strs = <span class="string">''</span>;</span><br><span class="line">        <span class="keyword">let</span> type = req.headers[<span class="string">'content-type'</span>];</span><br><span class="line">        <span class="keyword">let</span> boundary = type.split(<span class="string">'boundary='</span>)[<span class="number">1</span>];</span><br><span class="line">        req.on(<span class="string">'data'</span>, (str)=&gt; &#123;</span><br><span class="line">            strs += str.toString(<span class="string">'binary'</span>);</span><br><span class="line">        &#125;)</span><br><span class="line">        req.on(<span class="string">'end'</span>, ()=&gt; &#123;</span><br><span class="line">            </span><br><span class="line">            fs.writeFileSync(<span class="string">'./text'</span>, buffer.toString());</span><br><span class="line">            res.writeHead(<span class="number">200</span>, &#123;</span><br><span class="line">                <span class="string">'Content-Type'</span>: <span class="string">'application/json;charset=utf-8;'</span></span><br><span class="line">            &#125;);</span><br><span class="line"></span><br><span class="line">            strs = strs.split(<span class="string">'--'</span>+boundary + <span class="string">'--'</span>)[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> forms = strs.split(<span class="string">'--'</span>+boundary + <span class="string">'\r\n'</span>).filter(<span class="function"><span class="params">val</span>=&gt;</span> val);</span><br><span class="line"></span><br><span class="line">            <span class="keyword">let</span> formData = [];</span><br><span class="line"></span><br><span class="line">            forms.forEach(<span class="function"><span class="params">val</span>=&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> vals = val.split(<span class="string">'\r\n\r\n'</span>);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> value = vals[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> vlass = vals[<span class="number">0</span>].split(<span class="string">'\r\n'</span>).filter(<span class="function"><span class="params">val</span>=&gt;</span> val);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> name = vlass[<span class="number">0</span>].match(<span class="regexp">/name="([\w]&#123;0,&#125;)"/</span>)[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">                <span class="keyword">let</span> type;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span>(vlass[<span class="number">1</span>] &amp;&amp; vlass[<span class="number">1</span>].indexOf(<span class="string">'Content-Type'</span>) &gt; <span class="number">-1</span>) &#123;</span><br><span class="line">                    type = vlass[<span class="number">1</span>].match(<span class="regexp">/Content-Type: (.*)/</span>)[<span class="number">1</span>];</span><br><span class="line">                    fs.writeFileSync(<span class="string">'./test1.png'</span>,  <span class="keyword">new</span> Buffer(value , <span class="string">'binary'</span>));</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    type = <span class="string">'text/plain'</span>;</span><br><span class="line">                    value = value.split(<span class="string">'\r\n'</span>)[<span class="number">0</span>];</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                formData.push(&#123;</span><br><span class="line">                    type,</span><br><span class="line">                    name,</span><br><span class="line">                    value</span><br><span class="line">                &#125;)</span><br><span class="line"></span><br><span class="line">            &#125;)</span><br><span class="line"></span><br><span class="line">            <span class="built_in">console</span>.log(formData);</span><br><span class="line"></span><br><span class="line">            res.write(<span class="built_in">JSON</span>.stringify(&#123;</span><br><span class="line">                <span class="string">"success"</span>: <span class="literal">true</span></span><br><span class="line">            &#125;));</span><br><span class="line"></span><br><span class="line">            res.end();</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;).listen(port);</span><br></pre></td></tr></table></figure></p><p>这里会发现这么使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">req.on(<span class="string">'data'</span>, (str)=&gt; &#123;</span><br><span class="line">    strs += str.toString(<span class="string">'binary'</span>);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这个原因在于request里面使用的是buffer数据结构，如果像字符串操作的话，不管咋样都无法保存图片的。</p><p>而dicer是直接对buffer数据进行处理的。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过这一波的折腾算是对整个图片上传流程有了了解。当然在正式项目里面还是建议大家去用已经封装好的模块，能够避免很多问题。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.cnblogs.com/axes/p/4308430.html" target="_blank" rel="noopener">nodejs学习之文件上传</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;图片上传&quot;&gt;&lt;a href=&quot;#图片上传&quot; class=&quot;headerlink&quot; title=&quot;图片上传&quot;&gt;&lt;/a&gt;图片上传&lt;/h1&gt;&lt;p&gt;最近给设计妹妹搞了模板上传功能，里面涉及到了图片上传功能。&lt;/p&gt;
&lt;h2 id=&quot;input&quot;&gt;&lt;a href=&quot;#inp
      
    
    </summary>
    
      <category term="js" scheme="http://xiaoqiang730730.github.io/categories/js/"/>
    
    
      <category term="fetch" scheme="http://xiaoqiang730730.github.io/tags/fetch/"/>
    
      <category term="node" scheme="http://xiaoqiang730730.github.io/tags/node/"/>
    
      <category term="multer" scheme="http://xiaoqiang730730.github.io/tags/multer/"/>
    
  </entry>
  
  <entry>
    <title>react按路由分包加载</title>
    <link href="http://xiaoqiang730730.github.io/2018/04/06/react%E6%8C%89%E8%B7%AF%E7%94%B1%E5%88%86%E5%8C%85%E5%8A%A0%E8%BD%BD/"/>
    <id>http://xiaoqiang730730.github.io/2018/04/06/react按路由分包加载/</id>
    <published>2018-04-06T14:04:42.000Z</published>
    <updated>2019-03-31T07:51:07.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="按需加载"><a href="#按需加载" class="headerlink" title="按需加载"></a>按需加载</h1><p>一开始整个项目只有一个bundle.js，压缩之后达到了4M。导致首屏加载速度很慢，需要优化。</p><h1 id="方案"><a href="#方案" class="headerlink" title="方案"></a>方案</h1><p>优化包大小，从业务角度出发，抽离重复的业务组件，避免大规模的<strong>90%</strong>相似度代码。需要对业务熟悉，一时间优化没有那么明显。</p><p>从技术角度，项目里面使用了react route，那能不能按照路由按需加载呢？</p><h1 id="import"><a href="#import" class="headerlink" title="import()"></a>import()</h1><p>之前<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">'./math'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(add(<span class="number">16</span>, <span class="number">26</span>));</span><br></pre></td></tr></table></figure></p><p>之后<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span>(<span class="string">"./math"</span>).then(<span class="function"><span class="params">math</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(math.add(<span class="number">16</span>, <span class="number">26</span>));</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>利用import(), webpack会帮我们算依赖和局部更新。</p><h1 id="按需加载路由"><a href="#按需加载路由" class="headerlink" title="按需加载路由"></a>按需加载路由</h1><h2 id="正常情况"><a href="#正常情况" class="headerlink" title="正常情况"></a>正常情况</h2><p>一般是项目不大的情况下，会直接使用如下配置</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React, &#123; Component &#125; <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Route &#125; <span class="keyword">from</span> <span class="string">'react-router-dom'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> a1 <span class="keyword">from</span> <span class="string">'../components/a/a1/index.js'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routes = (</span><br><span class="line">  &lt;div className=<span class="string">'content'</span>&gt;</span><br><span class="line">    &lt;Route exact path=<span class="string">"/a/a1"</span> component=&#123;a1&#125; /&gt;</span><br><span class="line">  &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">)</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">export default routes;</span></span><br></pre></td></tr></table></figure><p>这个是路由提前预定好，webpack打包时候会将a1打包到bundle里面。但是erp有140多个route，会导致整个bundle无限变大。</p><h2 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h2><p>route的component本质就是个react.component</p><p>结合import()构造一个加载component</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">LoaderA</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">    <span class="keyword">super</span>(props);</span><br><span class="line">    <span class="keyword">this</span>.state = &#123;</span><br><span class="line">      loaded: <span class="literal">true</span>,</span><br><span class="line">      loading: <span class="literal">null</span>,</span><br><span class="line">      A: <span class="literal">null</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  componentDidMount() &#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="keyword">import</span>(<span class="string">'../components/a/a1/index.js'</span>).then(<span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">          A: e.default,</span><br><span class="line">          loaded: <span class="literal">false</span></span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;, <span class="number">2000</span>)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  render() &#123;</span><br><span class="line">    <span class="keyword">let</span> &#123; A &#125; = <span class="keyword">this</span>.state;</span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.state.loaded) &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'loading'</span>);</span><br><span class="line">      <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>loading...<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">A</span> /&gt;</span></span></span><br><span class="line"><span class="xml">  &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;</span></span><br></pre></td></tr></table></figure><p>LoaderA就是个组件，没有加载到A之前，用占位符，import()之后，再setState渲染真正组件</p><p>在稍微改下route配置<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;Route exact path=<span class="string">"/a/a1"</span> component=&#123;LoaderA&#125; /&gt;</span><br></pre></td></tr></table></figure></p><p><a href="https://stackblitz.com/edit/react-router-uduvm5" target="_blank" rel="noopener">查看运行例子</a></p><h1 id="React-Loadable"><a href="#React-Loadable" class="headerlink" title="React Loadable"></a>React Loadable</h1><p>利用上面的原理，我们就可以自己优化异步加载了，而<a href="https://github.com/jamiebuilds/react-loadable" target="_blank" rel="noopener">React Loadable</a>正是这个方案的优秀的库。</p><p>改写上面的LoaderA</p><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Loadable <span class="keyword">from</span> <span class="string">'react-loadable'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> LoaderA = Loadable(&#123;</span><br><span class="line">  loader: <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'../components/a/a1/index.js'</span>).then(<span class="function"><span class="params">a1</span>=&gt;</span> a1.default),</span><br><span class="line">  loading() &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">div</span>&gt;</span>Loading...<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">&lt;Route exact path=<span class="string">"/a/a1"</span> component=&#123;LoaderA&#125; /&gt;</span><br></pre></td></tr></table></figure><p>但是我们的正式环境的路由有150多个，不能每个都这么去配置，造成颗粒化严重，维护也不好维护了。</p><p>那能不能考虑按照一级路由进行切分，把一个大的bundle会切割几个小的bundle。</p><h1 id="路由配置"><a href="#路由配置" class="headerlink" title="路由配置"></a>路由配置</h1><p>在一级路由下面抽取route和组件之间关系<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> config = [</span><br><span class="line">    &#123; </span><br><span class="line">        bExact: <span class="literal">true</span>, </span><br><span class="line">        hash: <span class="string">'/a/a1'</span>,</span><br><span class="line">        key: <span class="string">'a1'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123; </span><br><span class="line">        bExact: <span class="literal">true</span>,</span><br><span class="line">        hash: <span class="string">'/a/a2'</span>,</span><br><span class="line">        key: <span class="string">'a2'</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//....</span></span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>导出配置<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> config.map(<span class="function"><span class="params">val</span>=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        &lt;Route</span><br><span class="line">            exact = &#123;val.bExact? <span class="literal">true</span> : <span class="literal">false</span>&#125;</span><br><span class="line">            path=&#123;val.hash&#125; key=&#123;val.key&#125; component=&#123;</span><br><span class="line">            Loadable(&#123;</span><br><span class="line">                loader: val.import?<span class="function"><span class="params">()</span> =&gt;</span> val.import().then(<span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> e[val.key]</span><br><span class="line">                &#125;): <span class="function"><span class="params">()</span> =&gt;</span> <span class="keyword">import</span>(<span class="string">'./pages.js'</span>).then(<span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">                    <span class="keyword">return</span> e[val.key]</span><br><span class="line">                &#125;),</span><br><span class="line">                loading: Loading</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125; /&gt;</span><br><span class="line">    )</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>这里就通过提取cofig配置信息，最核心的代码是loader处理。<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">() =&gt; <span class="keyword">import</span>(<span class="string">'./pages.js'</span>).then(<span class="function">(<span class="params">e</span>)=&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> e[val.key]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这里处理跟之前不一样了，是个动态值了，那么pages.js里面的组件就需要跟config里面的key值保持一致。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> a1 <span class="keyword">from</span> <span class="string">'../components/a/a1/index.js'</span>;</span><br><span class="line"><span class="keyword">import</span> a2 <span class="keyword">from</span> <span class="string">'../components/a/a2/index.js'</span>;</span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">    a1,</span><br><span class="line">    a2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pages.js则是当前一级路由下面所有的组件。</p><p>而在总route里面进行加载各个子路由<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> a <span class="keyword">from</span> <span class="string">'components/a/routes'</span>;</span><br><span class="line"><span class="keyword">import</span> b <span class="keyword">from</span> <span class="string">'components/b/routes'</span>;</span><br><span class="line"><span class="keyword">import</span> c <span class="keyword">from</span> <span class="string">'components/c/routes'</span>;</span><br><span class="line"><span class="keyword">import</span> d <span class="keyword">from</span> <span class="string">'components/d/routes'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> routers = [</span><br><span class="line">      ...a,</span><br><span class="line">      ...b,</span><br><span class="line">      ...c,</span><br><span class="line">      ...d</span><br><span class="line">];</span><br></pre></td></tr></table></figure></p><p>这样就将整个bundle这么细分到各个子路由里面去了，后面如果某个一级变的臃肿了，可以继续将其按照二级路由进行拆分。</p><p><a href="https://stackblitz.com/edit/react-router-uduvm5?embed=1&amp;file=components/app2.js" target="_blank" rel="noopener">查看效果</a></p><h1 id="线上优化效果"><a href="#线上优化效果" class="headerlink" title="线上优化效果"></a>线上优化效果</h1><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554018634664-e7be5ff6-88db-43f0-9f9a-7a42943453bf.png" alt=""><br>原先一个bundle.js 拆分成了10个bundle.js, 而且依托于webpack的强大，能够做到局部更新bundle.</p><p><img src="https://cdn.nlark.com/yuque/0/2019/gif/103994/1554018642755-1143e8cd-b1af-4f48-bb9b-07bcde0d41cb.gif" alt=""></p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>回过头来看，整个优化都是基于import()，这个来的。那么import()背后发生了什么呢？</p><h1 id="异步加载js"><a href="#异步加载js" class="headerlink" title="异步加载js"></a>异步加载js</h1><p>抛开webpack，如何异步加载js呢？很多人都会愣了一下，其实很简单，动态创建一个script标签。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> _ayncFunc = <span class="function"><span class="keyword">function</span>(<span class="params">src, cb</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> body = <span class="built_in">document</span>.getElementsByTagName(<span class="string">'body'</span>)[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.createElement(<span class="string">'script'</span>);</span><br><span class="line">    s.src = src;</span><br><span class="line">    s.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        cb &amp;&amp; cb();</span><br><span class="line">    &#125;;</span><br><span class="line">    body.appendChild(s);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这样子去加载js，webpack内部将异步js默认为一个chunk，就相当于多了chunk。很好理解import()为啥能够异步加载，而且能够计算重复内容了。</p><p><a href="https://github.com/webpack/webpack/blob/4de3ce057d5ce64055fc258505e004d2eccb2cb7/lib/web/JsonpMainTemplatePlugin.js#L141" target="_blank" rel="noopener">webpack实现</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;按需加载&quot;&gt;&lt;a href=&quot;#按需加载&quot; class=&quot;headerlink&quot; title=&quot;按需加载&quot;&gt;&lt;/a&gt;按需加载&lt;/h1&gt;&lt;p&gt;一开始整个项目只有一个bundle.js，压缩之后达到了4M。导致首屏加载速度很慢，需要优化。&lt;/p&gt;
&lt;h1 id=&quot;方案
      
    
    </summary>
    
      <category term="js" scheme="http://xiaoqiang730730.github.io/categories/js/"/>
    
    
      <category term="webpack" scheme="http://xiaoqiang730730.github.io/tags/webpack/"/>
    
      <category term="codeSplit" scheme="http://xiaoqiang730730.github.io/tags/codeSplit/"/>
    
      <category term="react" scheme="http://xiaoqiang730730.github.io/tags/react/"/>
    
      <category term="react-router" scheme="http://xiaoqiang730730.github.io/tags/react-router/"/>
    
      <category term="react-loadable" scheme="http://xiaoqiang730730.github.io/tags/react-loadable/"/>
    
  </entry>
  
  <entry>
    <title>qap最佳实战_动态代码</title>
    <link href="http://xiaoqiang730730.github.io/2018/03/19/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E5%8A%A8%E6%80%81%E4%BB%A3%E7%A0%81/"/>
    <id>http://xiaoqiang730730.github.io/2018/03/19/qap最佳实战_动态代码/</id>
    <published>2018-03-19T13:04:17.000Z</published>
    <updated>2018-09-24T06:27:47.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="qap最佳实战-动态代码"><a href="#qap最佳实战-动态代码" class="headerlink" title="qap最佳实战_动态代码"></a>qap最佳实战_动态代码</h1><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>一般性质的广告，都会走一些配置信息，客户端根据配置信息进行渲染。</p><p>一些定制化的广告，需要对服务端的配置信息进行更改，而客户端也需要根据新的配置信息进行渲染，这个周期时间有点长。而且有些个性化的广告，走配置化很难实现。</p><p>这类的需求，都是周期性，过了这个时间段就失效了。而且qap发包灰度，也会有个时间周期，为了避免发包，快速解决问题，能不能通过执行代码解决呢？</p><p>这里的配置信息，简单理解为一个接口请求，返回配置json数据。</p><h1 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h1><p>利用eval执行字符串代码<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">eval</span>(<span class="string">"alert('hello world')"</span>);</span><br></pre></td></tr></table></figure></p><h1 id="客户端改造"><a href="#客户端改造" class="headerlink" title="客户端改造"></a>客户端改造</h1><p>一个正常qap页面如下<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createElement, Component, findDOMNode, render&#125; <span class="keyword">from</span> <span class="string">'rax'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View &#125; <span class="keyword">from</span> <span class="string">'nuke'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;View&gt;&#123;<span class="string">'demo'</span>&#125;&lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">render(&lt;Demo /</span>&gt;);</span><br></pre></td></tr></table></figure></p><p>这里面render有第2个参数，默认的是body，利用render的第二个参数，可以将组件render指定的地方，这也就需要我们在原有页面里面预留坑位。</p><p>改造页面组件render方法<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">render() &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">        [</span><br><span class="line">            &lt;View id=&#123;<span class="string">'codeAdv'</span>&#125; /&gt;,</span><br><span class="line">            &lt;View&gt;&#123;<span class="string">'demo'</span>&#125;&lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        ]</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure></p><p>广告代码跟正常写代码一样<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createElement, Component, findDOMNode, render&#125; <span class="keyword">from</span> <span class="string">'rax'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; View &#125; <span class="keyword">from</span> <span class="string">'nuke'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adv</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;View&gt;&#123;<span class="string">'adv'</span>&#125;&lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        )</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">render(&lt;Adv /</span>&gt;, findDOMNode(<span class="string">'codeAdv'</span>));</span><br></pre></td></tr></table></figure></p><p>在render那步需要更改下。</p><p>经过这样改造我们就可以在qap页面里面去执行动态代码了。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>这里面会有一个问题就是经过babel转义之后的js比较大，如果走后端配置接口的话，比较难支持。这里可以换个思路将广告的代码放到远端js里面去。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">fetch(bundleUrl, &#123;</span><br><span class="line">    method: <span class="string">'GET'</span>,</span><br><span class="line">    dataType: <span class="string">'text'</span></span><br><span class="line">&#125;).then(<span class="function">(<span class="params">res</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> res.text();</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="built_in">eval</span>(data);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>这样后端配置那边只要配置bundleUrl，qap客户端稍微改造下，根据配置信息请求bundleUrl。</p><h1 id="进一步思考"><a href="#进一步思考" class="headerlink" title="进一步思考"></a>进一步思考</h1><p>我们能够执行异步代码了，那是不是意味着qap页面可以存在多文件机制了啊。</p><p>我们可以把一些常用的js或者json数据，放到服务器，通过上面的请求方式，异步加载到qap页面，模拟了多文件。但是使用的时候需要更改写法，因为是异步了。</p><p>在<a href="http://xiaoqiang730730.github.io/2018/03/10/qap-%E5%8C%85%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96/">qap-包大小优化</a>里面主要是为了去除apiList，那能不能通过这种方式，将apiList放到远端js，每次用的时候请求下。这样就做到完全不需要打包apiList了，比统一入口的方法还要激进。</p><p>理论上都是可以的，但是实际的开发和维护成本比较大。这种方式适合不变更的一些js。类似apiList这种，每次需求几乎都会发生改变，而且更新到服务器，又会带来多版本问题。</p><p>所以思考适合场景很重要，尽量做到开发和维护的成本比较低。</p><h1 id="打开远端页面"><a href="#打开远端页面" class="headerlink" title="打开远端页面"></a>打开远端页面</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;Button onPress=&#123;()=&gt; &#123;</span><br><span class="line">    QAP.navigator.push(&#123;</span><br><span class="line">        url: <span class="string">'http://img01.taobaocdn.com/top/i1/TB1f5xPQFXXXXaGXFXXdutXFXXX.js'</span>,</span><br><span class="line">        settings: &#123;</span><br><span class="line">            animate: <span class="literal">true</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;&#125;&gt;qap官方Demo&lt;<span class="regexp">/Button&gt;</span></span><br></pre></td></tr></table></figure><p>qap打开新页面是支持直接打开远端的js的，利用这个就可以把一些不经常更新的页面，直接放到自己的服务器上，从而减少整个包大小了。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><ol><li><a href="https://www.everythingfrontend.com/posts/studying-javascript-eval.html" target="_blank" rel="noopener">Different ways to evaluate string as code in JavaScript</a></li></ol><h1 id="qap实战系列"><a href="#qap实战系列" class="headerlink" title="qap实战系列"></a>qap实战系列</h1><ol><li><a href="http://xiaoqiang730730.github.io/2018/03/10/qap-%E5%8C%85%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96/">qap-包大小优化</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/14/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E7%BB%9F%E4%B8%80%E5%85%A5%E5%8F%A3">qap-统一入口</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/16/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E5%9B%BE%E8%A1%A8">qap-图表</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/18/qap最佳实战_跨页面需求">qap-跨页面需求</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/19/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E5%8A%A8%E6%80%81%E4%BB%A3%E7%A0%81/">qap-动态代码</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;qap最佳实战-动态代码&quot;&gt;&lt;a href=&quot;#qap最佳实战-动态代码&quot; class=&quot;headerlink&quot; title=&quot;qap最佳实战_动态代码&quot;&gt;&lt;/a&gt;qap最佳实战_动态代码&lt;/h1&gt;&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;
      
    
    </summary>
    
      <category term="js" scheme="http://xiaoqiang730730.github.io/categories/js/"/>
    
    
      <category term="qap" scheme="http://xiaoqiang730730.github.io/tags/qap/"/>
    
  </entry>
  
  <entry>
    <title>qap最佳实战_跨页面需求</title>
    <link href="http://xiaoqiang730730.github.io/2018/03/18/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E8%B7%A8%E9%A1%B5%E9%9D%A2%E9%9C%80%E6%B1%82/"/>
    <id>http://xiaoqiang730730.github.io/2018/03/18/qap最佳实战_跨页面需求/</id>
    <published>2018-03-18T06:28:10.000Z</published>
    <updated>2019-03-31T07:48:55.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="qap最佳实战-跨页面需求"><a href="#qap最佳实战-跨页面需求" class="headerlink" title="qap最佳实战_跨页面需求"></a>qap最佳实战_跨页面需求</h1><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>有些需求涉及到多个页面，比如续费页面涉及到商品详情页、商品列表页、首页等等。</p><p>最简单粗暴的做法是把续费页面抽离成一个单独的组件，然后在每个页面都引入。这里会重复打包，会使得包大小变大。为什么会重复打包之前<a href="#qap实践系列">一系列</a>已经说过原因了。</p><h1 id="利用统一入口"><a href="#利用统一入口" class="headerlink" title="利用统一入口"></a>利用统一入口</h1><p>利用之前的<a href="(http://xiaoqiang730730.github.io/2018/03/14/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E7%BB%9F%E4%B8%80%E5%85%A5%E5%8F%A3)">统一入口</a>， 将重复的需求写到统一入口页面， 在其它页面通过事件触发。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>这样会有个严重的问题，qap的页面是相互叠加的，新打开的页面会覆盖在之前的页面里面，这就导致在公共入口的需求无法看到。同时由于在统一入口里面加了需求代码，会增加统一入口代码量，首屏会收到影响。</p><h1 id="nativeDialog"><a href="#nativeDialog" class="headerlink" title="nativeDialog"></a>nativeDialog</h1><p><a href="http://qndoc.taobao.com/doc.htm#?docType=10&amp;docId=255" target="_blank" rel="noopener">文档</a></p><blockquote><p>Native 端开启一个新的窗口，具有独立 Instance，运行独立代码。</p></blockquote><p>文档里面只是说了些具体的使用，在实践之后，其能够盖住所有的qap页面，甚至能盖住旺旺聊天的窗口。所里利用这个特性能够满足多页需求，只需要打包一份组件代码，而且不会增加统一入口体积。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><ol><li>在入口页面监听事件用于打开需求的页面</li><li>在具体页面触发这个全局事件就可以了</li></ol><h1 id="问题？"><a href="#问题？" class="headerlink" title="问题？"></a>问题？</h1><p>既然nativeDialog是能够独立打开一个页面，是不是就可以不需要统一入口，直接在具体页面里面使用？</p><p>在一般情况下，这样是可以的，但是需求是不可想象的。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554016990824-b512550c-feca-42cf-86fd-ad288ed1fead.png" alt=""></p><h1 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h1><p>nativeDialog并不完美，是相互覆盖。也就是说当前存在nativeDialog的时候，再次通过nativeDialog弹出一个弹框的时候，是会把之前的弹框给覆盖了。也就是说如果出现2次多页面的弹框，就会相互覆盖。</p><h1 id="改造"><a href="#改造" class="headerlink" title="改造"></a>改造</h1><p>所以需要在统一入口，简单构建一个nativeDialog使用队列，依次排队使用。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>通过nativeDialog巧妙的使用，来解决跨多页面的需求，避免重复引用，控制整个应用包的大小。</p><h1 id="qap实践系列"><a href="#qap实践系列" class="headerlink" title="qap实践系列"></a>qap实践系列</h1><ol><li><a href="http://xiaoqiang730730.github.io/2018/03/10/qap-%E5%8C%85%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96/">qap-包大小优化</a></li><li><a href="(http://xiaoqiang730730.github.io/2018/03/14/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E7%BB%9F%E4%B8%80%E5%85%A5%E5%8F%A3)">qap-统一入口</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/16/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E5%9B%BE%E8%A1%A8">qap-图表</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/18/qap最佳实战_跨页面需求">qap-跨页面需求</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/19/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E5%8A%A8%E6%80%81%E4%BB%A3%E7%A0%81/">qap-动态代码</a></li></ol><h1 id="相关内容"><a href="#相关内容" class="headerlink" title="相关内容"></a>相关内容</h1><p><a href="https://github.com/amfe/article/issues/18" target="_blank" rel="noopener">https://github.com/amfe/article/issues/18</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;qap最佳实战-跨页面需求&quot;&gt;&lt;a href=&quot;#qap最佳实战-跨页面需求&quot; class=&quot;headerlink&quot; title=&quot;qap最佳实战_跨页面需求&quot;&gt;&lt;/a&gt;qap最佳实战_跨页面需求&lt;/h1&gt;&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; cla
      
    
    </summary>
    
      <category term="js" scheme="http://xiaoqiang730730.github.io/categories/js/"/>
    
    
      <category term="qap" scheme="http://xiaoqiang730730.github.io/tags/qap/"/>
    
  </entry>
  
  <entry>
    <title>qap最佳实战_图表</title>
    <link href="http://xiaoqiang730730.github.io/2018/03/16/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E5%9B%BE%E8%A1%A8/"/>
    <id>http://xiaoqiang730730.github.io/2018/03/16/qap最佳实战_图表/</id>
    <published>2018-03-16T15:22:20.000Z</published>
    <updated>2019-03-31T07:47:26.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="qap最佳实战-图表"><a href="#qap最佳实战-图表" class="headerlink" title="qap最佳实战_图表"></a>qap最佳实战_图表</h1><p><a href="http://qndoc.taobao.com/doc.htm#?docType=10&amp;docId=267" target="_blank" rel="noopener">官方图表</a></p><p><img src="https://img.alicdn.com/tfs/TB1L5OkQFXXXXX7XVXXXXXXXXXX-630-1128.jpg" alt=""></p><p>实际设计图<br><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/103994/1554018141297-eca2803e-7ad6-496b-845e-891211cc5118.jpeg?x-oss-process=image/resize,w_692" alt=""></p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>官方提供的图表插件是原生的，性能肯定比较好，但是配置项，样式之类很难做个性化。</p><h1 id="如何解决？"><a href="#如何解决？" class="headerlink" title="如何解决？"></a>如何解决？</h1><p>我们知道h5里面有各种各样的图表库，帮助我们做到各种各样的样式，那能不能在qap平台使用呢？</p><h1 id="web组件"><a href="#web组件" class="headerlink" title="web组件"></a>web组件</h1><p>从weex的<a href="http://weex-project.io/cn/references/components/web.html" target="_blank" rel="noopener">web</a>文档上看，web组件很早之前就已经支持了，同时qap平台又支持了<a href="http://qndoc.taobao.com/doc.htm#?docType=1&amp;docId=107257" target="_blank" rel="noopener">事件机制</a>,利用这种特性我们就能轻松实现图表了。</p><h1 id="具体实现"><a href="#具体实现" class="headerlink" title="具体实现"></a>具体实现</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;render, Component&#125; <span class="keyword">from</span> <span class="string">'rax'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;Web&#125; <span class="keyword">from</span> <span class="string">'nuke'</span>;</span><br><span class="line"><span class="keyword">import</span> QAP <span class="keyword">from</span> <span class="string">'QAP-SDK'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props)</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    componentDidMount() &#123;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 1. fetch Data</span></span><br><span class="line">        <span class="comment">// 2. QAP.emit('app.chart.data', data);</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">Web</span> <span class="attr">style</span>=<span class="string">&#123;&#123;flex:</span> <span class="attr">1</span>&#125;&#125; <span class="attr">src</span>=<span class="string">'https://chart.html'</span> /&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">render(<span class="tag">&lt;<span class="name">Demo</span>/&gt;</span>);</span></span><br></pre></td></tr></table></figure><p>chart.html页面<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"chart"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//g.alicdn.com/x-bridge/qap-sdk/&#123;version&#125;/qn.js"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 其中 &#123;version&#125; 为版本号 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript">        QN.on(<span class="string">'app.chart.data'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="comment">// 调用图表库渲染</span></span></span><br><span class="line"><span class="undefined">        &#125;)</span></span><br><span class="line"><span class="undefined">    </span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>渲染web组件，取到后端数据后台，发送一个事件给chart.html页面</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554017869799-14c343a0-584e-41b2-ac78-3106a0b1c30e.png" alt=""></p><p>总结来说通过事件把web页面和qap页面结合起来了。</p><h1 id="线上问题"><a href="#线上问题" class="headerlink" title="线上问题"></a>线上问题</h1><p>做native开发都会涉及到版本问题，这是无法规避的问题，这也是要去解决的。nuke线上也存在多个版本，我们支持千牛最低版本是<code>5.8.2</code>, 那个千牛nuke版本里面还没有web组件，就会导致线上会出现异常。</p><h1 id="自己封装web"><a href="#自己封装web" class="headerlink" title="自己封装web"></a>自己封装web</h1><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createElement, PureComponent, render&#125; <span class="keyword">from</span> <span class="string">'rax'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Web</span> <span class="keyword">extends</span> <span class="title">PureComponent</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">web</span> &#123;<span class="attr">...this.props</span>&#125; /&gt;</span></span></span><br><span class="line"><span class="xml">    &#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">&#125;</span></span><br><span class="line"><span class="xml"></span></span><br><span class="line"><span class="xml">export default Web;</span></span><br></pre></td></tr></table></figure><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>最终通过事件机制集合web组件，巧妙的化解图表问题，任何复杂的图表都不用担心了，而且也可以用在其他地方，这个就需要自己在实际去处理问题。</p><h1 id="实际场景"><a href="#实际场景" class="headerlink" title="实际场景"></a>实际场景</h1><p>在群里有人问有些场景，后端放回的是html，怎么渲染？利用上面的方法就很好解决。</p><p>在qap页面发送html数据给web页面，web接受到数据后直接dom操作，渲染到页面上面。</p><h1 id="qap实战系列"><a href="#qap实战系列" class="headerlink" title="qap实战系列"></a>qap实战系列</h1><ol><li><a href="http://xiaoqiang730730.github.io/2018/03/10/qap-%E5%8C%85%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96/">qap-包大小优化</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/14/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E7%BB%9F%E4%B8%80%E5%85%A5%E5%8F%A3">qap-统一入口</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/16/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E5%9B%BE%E8%A1%A8">qap-图表</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/18/qap最佳实战_跨页面需求">qap-跨页面需求</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/19/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E5%8A%A8%E6%80%81%E4%BB%A3%E7%A0%81/">qap-动态代码</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;qap最佳实战-图表&quot;&gt;&lt;a href=&quot;#qap最佳实战-图表&quot; class=&quot;headerlink&quot; title=&quot;qap最佳实战_图表&quot;&gt;&lt;/a&gt;qap最佳实战_图表&lt;/h1&gt;&lt;p&gt;&lt;a href=&quot;http://qndoc.taobao.com/doc.h
      
    
    </summary>
    
      <category term="js" scheme="http://xiaoqiang730730.github.io/categories/js/"/>
    
    
      <category term="qap" scheme="http://xiaoqiang730730.github.io/tags/qap/"/>
    
  </entry>
  
  <entry>
    <title>qap最佳实战_统一入口</title>
    <link href="http://xiaoqiang730730.github.io/2018/03/14/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E7%BB%9F%E4%B8%80%E5%85%A5%E5%8F%A3/"/>
    <id>http://xiaoqiang730730.github.io/2018/03/14/qap最佳实战_统一入口/</id>
    <published>2018-03-14T00:18:21.000Z</published>
    <updated>2019-03-31T07:48:32.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="qap最佳实战-统一入口"><a href="#qap最佳实战-统一入口" class="headerlink" title="qap最佳实战_统一入口"></a>qap最佳实战_统一入口</h1><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>我们的<a href="http://xiaoqiang730730.github.io/2018/03/10/qap-%E5%8C%85%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96/#包大小优化原因">包大小是随着页面增加越来越大</a>，这里面就会导致有些代码不断的重复打包，那能不能减少这部分代码呢？</p><h1 id="原先跳转逻辑"><a href="#原先跳转逻辑" class="headerlink" title="原先跳转逻辑"></a>原先跳转逻辑</h1><p>用户从工作台-&gt;点击出售中-&gt;跳到商品列表</p><p>用户从消息列表-&gt;点击商品信息-&gt;跳到商品详情</p><p>用户点击商品管理-&gt;跳到商品首页</p><p>由于存在多个路径<strong>没法统一处理</strong>，因为不知道用户会从哪里进入旺店商品。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/103994/1554017608201-363d2cb3-a6b1-492f-b4e5-8062c53b5e22.jpeg" alt=""></p><h1 id="更改跳转逻辑"><a href="#更改跳转逻辑" class="headerlink" title="更改跳转逻辑"></a>更改跳转逻辑</h1><p>用户从工作台-&gt;点击出售中-&gt;跳到商品首页-&gt;再跳到商品列表</p><p>用户从消息列表-&gt;点击商品信息-&gt;跳到商品首页-&gt;再跳到商品详情</p><p>用户点击商品管理-&gt;跳到商品首页</p><p>这样就能找到一个公共的入口页面</p><h1 id="改造跳转"><a href="#改造跳转" class="headerlink" title="改造跳转"></a>改造跳转</h1><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">getEventPage() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取url里面的event值</span></span><br><span class="line">    <span class="keyword">let</span> event = url.getQueryParam(<span class="string">'event'</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 获取额外参数</span></span><br><span class="line">    <span class="keyword">let</span> extraData = url.getQueryParam(<span class="string">'extraData'</span>) || <span class="string">''</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 进行event判断跳转</span></span><br><span class="line">    <span class="keyword">let</span> qapPage;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 返回要进一步跳转的页面</span></span><br><span class="line">    <span class="keyword">return</span> qapPage;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最关键代码就是获取event的值，以及extraData，进行各个入口不同的判断。</p><h1 id="优化之后效果"><a href="#优化之后效果" class="headerlink" title="优化之后效果"></a>优化之后效果</h1><p><a href="http://7te8kr.com1.z0.glb.clouddn.com/qap_1_7.gif" target="_blank" rel="noopener">橱窗中</a><br><a href="http://7te8kr.com1.z0.glb.clouddn.com/qap_1_8.gif" target="_blank" rel="noopener">正常进入</a><br><a href="http://7te8kr.com1.z0.glb.clouddn.com/qap_1_9.gif" target="_blank" rel="noopener">呼起商品详情</a></p><!-- **ps: 这里有个问题是在呼起商品详情页，按照路径是先到首页再到详情页，但是这里面ios有个并发调用sdk问题，导致ios的加载时间比较费时。就提前先跳转详情页，然后在后面偷偷加载首页。** --><h1 id="公共代码改造"><a href="#公共代码改造" class="headerlink" title="公共代码改造"></a>公共代码改造</h1><p>新建<code>publicTrans</code>文件夹，里面是能够抽离出来的公共代码。</p><p>为了不影响业务层使用，需要做一个中间层转换。</p><h1 id="具体事例"><a href="#具体事例" class="headerlink" title="具体事例"></a>具体事例</h1><p>联系客服旺旺，是个稍微复杂的工具方法。涉及到旺旺分流、客服上下班等具体的业务场景。但是在实际情况下，用户登录之后请求一次数据就能够满足用户在登录过程中所以的场景。</p><p>在页面里面继续保持原先使用<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> wangwang <span class="keyword">from</span> <span class="string">'common/chatww'</span>;</span><br></pre></td></tr></table></figure></p><p>对原先<code>chatww</code>进行改造</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QAP <span class="keyword">from</span> <span class="string">'QAP-SDK'</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 呼起旺旺</span></span><br><span class="line"><span class="comment"> * @param&#123;Object&#125; params        参数</span></span><br><span class="line"><span class="comment"> * @param&#123;String&#125; params.nick   用户昵称</span></span><br><span class="line"><span class="comment"> * @param&#123;String&#125; params.text   需要传递的内容</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">let</span> wangwang = <span class="function">(<span class="params">params</span>) =&gt;</span> &#123;</span><br><span class="line">    QAP.emit(<span class="string">'App.global.openChatWW'</span>, params);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> wangwang;</span><br></pre></td></tr></table></figure><p>而在<code>publicTrans</code>里面新建旺旺事件捕捉文件<code>chatww.js</code></p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> QAP <span class="keyword">from</span> <span class="string">'QAP-SDK'</span>;</span><br><span class="line"><span class="keyword">import</span> wangwang <span class="keyword">from</span> <span class="string">'common/chatwwCore'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> chatww = <span class="function"><span class="params">()</span>=&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    QAP.on(<span class="string">'App.global.openChatWW'</span>, (params)=&gt; &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(params);</span><br><span class="line">        wangwang(params);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> chatww;</span><br></pre></td></tr></table></figure><p><code>chatwwCore</code>就是之前的<code>chatww</code>, 这样子改造之后，不会影响线上的使用。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554018013570-6a51eadc-b337-4d54-acdd-aa024fb413d6.png" alt=""></p><p>利用qap提供的事件机制，将之前的打开旺旺这个行为转接到统一入口里面。这样线上80多个页面，之前每个页面都要引入一次<code>chatwwCore</code>, 现在改造成只有统一入口引入，其它页面只是引入了一个事件方法。</p><h1 id="思考：是不是每个公共方法都适合么？"><a href="#思考：是不是每个公共方法都适合么？" class="headerlink" title="思考：是不是每个公共方法都适合么？"></a>思考：是不是每个公共方法都适合么？</h1><p>不是每个方法都适合在统一入口里面去做事件监听，实践之后，建议是处于被动、用户自己触发的一些事情，可以这么去做。</p><h1 id="不适合例子"><a href="#不适合例子" class="headerlink" title="不适合例子"></a>不适合例子</h1><p>像数据处理工具函数，处理起来就比较麻烦，是因为qap事件无法执行参数函数。</p><p>定义一个函数A<code>Acore.js</code><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">A</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// 格式化</span></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>怎么处理？</p><h2 id="首先在publicTrans入口捕捉处理"><a href="#首先在publicTrans入口捕捉处理" class="headerlink" title="首先在publicTrans入口捕捉处理"></a>首先在publicTrans入口捕捉处理</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> A <span class="keyword">from</span> <span class="string">'common/Acore.js'</span>;</span><br><span class="line">QAP.on(<span class="string">'App.global.handleA'</span>, (data)=&gt; &#123;</span><br><span class="line">    <span class="keyword">let</span> result = A(data.data);</span><br><span class="line">    QAP.emit(data.eventName, result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="其次是A的处理A-js"><a href="#其次是A的处理A-js" class="headerlink" title="其次是A的处理A.js"></a>其次是A的处理<code>A.js</code></h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">handle</span> = (<span class="params">data, cb</span>)=&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> eventName = <span class="string">'App.global.handleAResult'</span> + (+<span class="keyword">new</span> <span class="built_in">Date</span>());</span><br><span class="line">    QAP.emit(<span class="string">'App.global.handleA'</span>, &#123;</span><br><span class="line">        eventName,</span><br><span class="line">        data</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    QAP.on(eventName, (result)=&gt; &#123;</span><br><span class="line">        cb &amp;&amp; cb(result);</span><br><span class="line">        QAP.off(eventName);</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="具体使用"><a href="#具体使用" class="headerlink" title="具体使用"></a>具体使用</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> A <span class="keyword">from</span> A.js</span><br><span class="line"></span><br><span class="line">A(data, (result)=&gt; &#123;</span><br><span class="line">    <span class="comment">//todo</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554017869023-9544466d-67f2-4a3b-be5f-12521594c845.png" alt=""></p><p>这里简单来说，统一入口相当于中转站。将原有页面的一些操作处理，都放在中转站来做。其它页面通过事件桥接起来。</p><p><a href="http://xiaoqiang730730.github.io/2018/03/10/qap-%E5%8C%85%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96/">再来看之前问题-apiList</a></p><p>之前用babel-plugin预处理了apiList，那能不能用这种方式呢？</p><p>在统一入口里面引入apiList，在其它页面通过事件到统一入口取回api的映射，或者直接在统一入口里面发起请求，之间取回所要的数据。</p><p>这个过程跟上面A的例子类似。实践过之后，比之前babel-plugin的效果稍微好3%左右，说明我们每个页面的api个数不是很多。但是我并没有使用这种方式，中间环节太多，不可控的因素就增多了，还是建议处于被动行为，只有触发行为的，可以这么去做。</p><h1 id="qap实践系列"><a href="#qap实践系列" class="headerlink" title="qap实践系列"></a>qap实践系列</h1><ol><li><a href="http://xiaoqiang730730.github.io/2018/03/10/qap-%E5%8C%85%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96/">qap-包大小优化</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/14/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E7%BB%9F%E4%B8%80%E5%85%A5%E5%8F%A3">qap-统一入口</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/16/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E5%9B%BE%E8%A1%A8">qap-图表</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/18/qap最佳实战_跨页面需求">qap-跨页面需求</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/19/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E5%8A%A8%E6%80%81%E4%BB%A3%E7%A0%81/">qap-动态代码</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;qap最佳实战-统一入口&quot;&gt;&lt;a href=&quot;#qap最佳实战-统一入口&quot; class=&quot;headerlink&quot; title=&quot;qap最佳实战_统一入口&quot;&gt;&lt;/a&gt;qap最佳实战_统一入口&lt;/h1&gt;&lt;h1 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;
      
    
    </summary>
    
      <category term="js" scheme="http://xiaoqiang730730.github.io/categories/js/"/>
    
    
      <category term="qap" scheme="http://xiaoqiang730730.github.io/tags/qap/"/>
    
  </entry>
  
  <entry>
    <title>qap_包大小优化</title>
    <link href="http://xiaoqiang730730.github.io/2018/03/10/qap-%E5%8C%85%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96/"/>
    <id>http://xiaoqiang730730.github.io/2018/03/10/qap-包大小优化/</id>
    <published>2018-03-10T09:04:36.000Z</published>
    <updated>2019-03-31T07:46:05.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p><a href="http://open.taobao.com/docs/doc.htm?spm=a219a.7629140.0.0.Stgo7V&amp;treeId=260&amp;articleId=105545&amp;docType=1" target="_blank" rel="noopener">Qianniu Application Platform(QAP)是阿里千牛官方推出的、功能丰富的开发者套件。底层weex，上层有SDK接口、rax库、以及rax的ui组件nuke</a></p></blockquote><blockquote><p><a href="https://alibaba.github.io/rax/" target="_blank" rel="noopener">rax</a></p></blockquote><blockquote><p><a href="http://nuke.taobao.org/nukedocs/guide/nuke-introduce.html" target="_blank" rel="noopener">nuke是一套基于 Weex 容器 与 rax 开源渲染引擎的面向电商中后台场景的 UI 组件生态</a></p></blockquote><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>2017年 由于整个技术方向切到qap平台，将原有的h5 web app 改造成以weex渲染。</p><h1 id="demo"><a href="#demo" class="headerlink" title="demo"></a>demo</h1><p><a href="https://github.com/xiaoqiang730730/qapOptimizitons" target="_blank" rel="noopener">可以查看demo了解文件目录</a></p><h1 id="包大小优化原因"><a href="#包大小优化原因" class="headerlink" title="包大小优化原因"></a>包大小优化原因</h1><p>qap平台应用简单来说是多页应用，每个页面之间都是无关联的，借助于weex的<code>navigator</code>进行跳转。对比web浏览器来说，就是多页面开发，每次跳转都是打开新的窗口页面。web浏览器是支持一个页面里面引入多个js的，但是<a href="(https://weex.apache.org/cn/wiki/platform-difference.html#mei-you-history-location-navigator-dui-xiang">weex现阶段只支持一个页面一个js</a>)。</p><p>qap平台是将千牛应用的js打包成一个zip，通过后台服务上传，然后由千牛推送给用户，这就决定了我们必然要去优化这个zip包的大小。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554017868973-e1d8ff82-d25e-41e4-b6e3-159ef77ce5ec.png" alt="正式环境的包"></p><p>同时用户在首次下载新版本包的时候，包越大越容易导致丢包，用户无法更新到最新包，用户网络不能一直保持良好状态。</p><h1 id="一个例子"><a href="#一个例子" class="headerlink" title="一个例子"></a>一个例子</h1><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554017868799-23fceb0a-67f1-4995-978f-c7ca5bfbdb71.png" alt="意见反馈"></p><p>页面比较简单，核心代码如下<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;createElement, Component, render&#125; <span class="keyword">from</span> <span class="string">'rax'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123;View,Text,Button,Link,Image,Modal,TextInput,TouchableHighlight&#125; <span class="keyword">from</span> <span class="string">'nuke'</span>;</span><br><span class="line"><span class="keyword">import</span> st <span class="keyword">from</span> <span class="string">'./style.rxscss'</span>;</span><br><span class="line"><span class="keyword">import</span> QAP <span class="keyword">from</span> <span class="string">'QAP-SDK'</span>;</span><br><span class="line"><span class="keyword">import</span> WangWang <span class="keyword">from</span> <span class="string">'common/chatww'</span>;</span><br><span class="line"><span class="keyword">import</span> RCUserInfo <span class="keyword">from</span> <span class="string">'common/userInfo'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Feedback</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span>(props) &#123;</span><br><span class="line">        <span class="keyword">super</span>(props);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 具体业务场景</span></span><br><span class="line"></span><br><span class="line">    render() &#123;</span><br><span class="line">        <span class="keyword">return</span> (</span><br><span class="line">            &lt;View style=&#123;st.feedbackContentWrap&#125;&gt;</span><br><span class="line">                &lt;View style=&#123;st.feedbackInputWrap&#125;&gt;</span><br><span class="line">                    &lt;TextInput</span><br><span class="line">                        ref=<span class="string">"myFb"</span></span><br><span class="line">                        placeholder=<span class="string">'吐槽、建议、改进、新功能统统写上来，我们会尽快联系您哒~'</span></span><br><span class="line">                        multiline=&#123;<span class="literal">true</span>&#125;</span><br><span class="line">                        style=&#123;st.feedbackInput&#125;</span><br><span class="line">                    /&gt;</span><br><span class="line">                &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">                &lt;Button</span></span><br><span class="line"><span class="regexp">                    style=&#123;st.singleSubmitBtn&#125;</span></span><br><span class="line"><span class="regexp">                    onPress=&#123;this.submit.bind(this)&#125;</span></span><br><span class="line"><span class="regexp">                &gt;</span></span><br><span class="line"><span class="regexp">                    提交</span></span><br><span class="line"><span class="regexp">                &lt;/</span>Button&gt;</span><br><span class="line">            &lt;<span class="regexp">/View&gt;</span></span><br><span class="line"><span class="regexp">        );</span></span><br><span class="line"><span class="regexp">    &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">render(&lt;Feedback/</span>&gt;);</span><br></pre></td></tr></table></figure></p><p>这个页面依赖了<code>rax, QAP-SDK, nuke, chatww, userInfo style.rxscss</code>，但是阿里的qap平台已经帮我们内嵌了<code>rax, QAP-SDK, nuke</code>，我们在打包的时候就不需要打包了，剩下的依赖其实不算是很多，然而最终的打包之后的大小不理想。达到了38k。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554018308184-a40b7cf0-18e8-4396-a691-20cc2773c8a7.png" alt=""></p><h1 id="再次分析"><a href="#再次分析" class="headerlink" title="再次分析"></a>再次分析</h1><p>我们里面依赖了<a href="https://github.com/xiaoqiang730730/qapOptimizitons/blob/master/src/common/userInfo.js" target="_blank" rel="noopener">userInfo, 而userInfo依赖了fetch，fetch依赖了apiList</a>，</p><p>而apiList是啥？</p><h1 id="apiList分析"><a href="#apiList分析" class="headerlink" title="apiList分析"></a>apiList分析</h1><p>对于前后分离项目，前端这边会有一个api映射表，用于数据请求。这里apiList是所有页面的api映射的集合。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> apiList = &#123;</span><br><span class="line">    getUserInfo: &#123;</span><br><span class="line">        server: <span class="string">'rc'</span>,</span><br><span class="line">        url: <span class="string">'https://mwdsp.superboss.cc/public/getUserInfo.rjson'</span></span><br><span class="line">    &#125;</span><br><span class="line">    ...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>随着项目越来越复杂，apiList 越来越复杂，在实际项目里面apiList 达到了30k多。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554017868735-cf8dff98-00c1-49ab-bdcb-061c7a972d0c.png" alt=""></p><p>而在实际项目里面有超过80个chunk，<a href="https://weex.apache.org/cn/wiki/platform-difference.html#mei-you-history-location-navigator-dui-xiang" target="_blank" rel="noopener">每个chunk都会打包apiList</a>，有人会说用<code>CommonsChunkPlugin</code>抽离公共的js，但是现在<strong>weex还不支持一个页面多个js机制</strong>，所以就会出现80*30重复了很多。</p><h1 id="拆分apiList"><a href="#拆分apiList" class="headerlink" title="拆分apiList"></a>拆分apiList</h1><p>既然apiList冗余，那能不能在使用的时候，只要打包想要的呢？</p><h1 id="方案1-更改请求写法"><a href="#方案1-更改请求写法" class="headerlink" title="方案1-更改请求写法"></a>方案1-更改请求写法</h1><p>现有的方式<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.request(&#123;</span><br><span class="line">    api: <span class="string">'XXX'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>这种方式在原有的h5里面是可以的，全局共享apiList。</p><p>可以改成<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;XXX&#125; <span class="keyword">from</span> <span class="string">'api'</span></span><br><span class="line"></span><br><span class="line">XXX();</span><br></pre></td></tr></table></figure></p><p>这样就能够按需加载api了，但是要大改整个请求，而且在每个页面都得更改，成本太大了。新的项目可以这样子，但是对于现有的项目改动成本大。</p><h1 id="方案2-提前处理api"><a href="#方案2-提前处理api" class="headerlink" title="方案2-提前处理api"></a>方案2-提前处理api</h1><p>既然apiList很大，那就不用了，直接在使用的时候，把映射关系写到参数里面。</p><p>这个会带来很多问题，一个api在多个页面被使用了，一旦改动就要涉及到多个页面改动，给项目维护带来很大困难。</p><h1 id="方案3-提前预处理api"><a href="#方案3-提前预处理api" class="headerlink" title="方案3-提前预处理api"></a>方案3-提前预处理api</h1><p>改进方案2，还是按照之前的写法，在打包的过程中，提前把映射关系注入参数。</p><h2 id="利用babel-plugin"><a href="#利用babel-plugin" class="headerlink" title="利用babel-plugin"></a>利用babel-plugin</h2><p>将<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">request(&#123;</span><br><span class="line">    api: <span class="string">'A0'</span></span><br><span class="line">&#125;, (result)=&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p>转成<br><figure class="highlight jsx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">request(&#123;</span><br><span class="line">    api: <span class="string">'A0'</span>,</span><br><span class="line">    apio: &#123;</span><br><span class="line">        server: <span class="string">'rc'</span>,</span><br><span class="line">        url: <span class="string">'https://mwdsp.superboss.cc/api/a0'</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;, result =&gt; &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(result);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>就可以不需要引入apiList了。</p><p><a href="https://github.com/xiaoqiang730730/qapOptimizitons/tree/master/transAPI" target="_blank" rel="noopener">查看具体详情</a></p><p>这样就能够抛弃apiList了，最终通过这种方式优化了25%的体积。</p><h2 id="进一步思考"><a href="#进一步思考" class="headerlink" title="进一步思考"></a>进一步思考</h2><p>如果有80个页面，每个页面用了userInfo，按照上面的思路，是不是最终会有80个userInfo？</p><p>其实不然，每个页面会有很多组件，如果有些组件里面是单独请求userInfo，也会做一次转化。最终是<code>&gt;=80</code>个。</p><p>那能不能进一步减少呢？</p><p>那就是要抽离重复代码，将userInfo封装成一个公共函数调用，最终webpack计算页面组件依赖关系的时候，只会计算出依赖userInfo这个公共函数，这样就能做到80次转化userInfo。</p><p>那能不能进一步减少呢？</p><p>这里就设计到qap平台的一些特性了，这个后面会在<strong>qap统一入口</strong>里描述，不是任何场景都适合。</p><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>apiList 是动态对象，业务层存在动态调用。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554017868905-4beaacf5-621e-47ec-8256-df1ffd06295d.png" alt=""></p><p>在通过babel-plugin处理request的时候，是得知道真正调用的api的名字的。动态传参是无法转换的。</p><p>这里就需要手动改成静态调用。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>包的大小对于web应用，以及native应用一直都是难题；在业务复杂情况下，怎么做好包大小控制都是难题。</p><p>此次主要是对apiList进行优化，效果比较显著，在实际项目里包的大小降低了25%。</p><h1 id="再次思考？"><a href="#再次思考？" class="headerlink" title="再次思考？"></a>再次思考？</h1><p>能不能计算出每个页面里面具体使用了哪些api，然后替换掉apiList，每个页面的apiList都是精简过后的，这样就不用转化了。<br>这个在统一入口实战里面有涉及到。</p><h1 id="qap实践系列"><a href="#qap实践系列" class="headerlink" title="qap实践系列"></a>qap实践系列</h1><ol><li><a href="http://xiaoqiang730730.github.io/2018/03/10/qap-%E5%8C%85%E5%A4%A7%E5%B0%8F%E4%BC%98%E5%8C%96/">qap-包大小优化</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/14/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E7%BB%9F%E4%B8%80%E5%85%A5%E5%8F%A3">qap-统一入口</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/16/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E5%9B%BE%E8%A1%A8">qap-图表</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/18/qap最佳实战_跨页面需求">qap-跨页面需求</a></li><li><a href="http://xiaoqiang730730.github.io/2018/03/19/qap%E6%9C%80%E4%BD%B3%E5%AE%9E%E6%88%98_%E5%8A%A8%E6%80%81%E4%BB%A3%E7%A0%81/">qap-动态代码</a></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://open.taobao.com/docs/doc.htm?spm=a219a.7629140.0.0.Stgo7V&amp;amp;treeId=260&amp;amp;articleId=105545&amp;amp;docType=1&quot;
      
    
    </summary>
    
      <category term="js" scheme="http://xiaoqiang730730.github.io/categories/js/"/>
    
    
      <category term="qap" scheme="http://xiaoqiang730730.github.io/tags/qap/"/>
    
      <category term="babel" scheme="http://xiaoqiang730730.github.io/tags/babel/"/>
    
      <category term="webpack" scheme="http://xiaoqiang730730.github.io/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>2016D2</title>
    <link href="http://xiaoqiang730730.github.io/2016/12/19/2016D2/"/>
    <id>http://xiaoqiang730730.github.io/2016/12/19/2016D2/</id>
    <published>2016-12-19T11:40:25.000Z</published>
    <updated>2019-03-31T07:21:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>  2016年12月17号，博主去参加了d2，想写点记录。但是动手写的时候，发现其实没啥好写的。还是直接看知乎很多人的回答吧！<a href="https://www.zhihu.com/question/52777303" target="_blank" rel="noopener">参加第11届D2前端技术论坛，你有什么收获</a>, 还是写点简单吧，要不然就没啥记录了。</p><h1 id="行程"><a href="#行程" class="headerlink" title="行程"></a>行程</h1><ol><li><p>9点20左右到会场<br>做个公交一路上堵死了（o(╯□╰)o），到了会场就输入手机进行签到。签字墙上已经签的全是字了，还是来的太晚了。</p></li><li><p>9点30左右到会场门口<br>被今年的阿里吓住了，几乎整个会场外围都是阿里的。有送杯子的g2，有送照片的XUX，还有送’钱’的teambition。还有有意思的VR，博主还体验了一把。飞猪写了个‘贪吃蛇’游戏，太难玩了，说是用weex写的（o(╯□╰)o)。</p></li><li><p>9点50左右-weex场<br>因为现在博主所在公司，有用到与weex有关的QAP平台，所以博主想在weex场，听听有没有所帮助的。<br>由于之前迟到了，并没有听到完整的，只听了一小部分。总体感觉weex在底层做了很多的优化，但是对于博主或者对于开发者而言，并不需要太关注怎么优化的，更多的是要关注怎么在实际的项目的中怎么完美开发的，或者怎么避开现有的‘坑’，因为现在weex还在不断补全UI组件，但是实际项目中，需求是很多的，要做有特点、有个性的产品，现有的组件是满足不了的，扩展组件还需要原生支持，所以还是处在观望中。</p></li><li><p>10点30-前端服务化场<br>听上去，感觉像是产品发布会，做了很多东西，便于提高前端的开发效率，通向零成本。博主觉得这个东西适合一些固定的场景，比如运营广告页啥的。博主公司也有广告系统，便于投固定的广告、运营页。</p></li><li><p>11.30-磨刀石<br>简单听了前半下，就是解决无线真机调试问题。这个也就只有大厂能做了。呵呵~</p></li><li><p>12点<br>和妹子同事，@i蒹葭从风-峰哥，和@一丝姐姐吃饭。出乎意料的是一丝姐姐带着2个妹子一起来吃饭。♪(＾∀＾●)ﾉ</p></li><li><p>14点50左右-17点半<br>下午依次稍微听了Node.js在YunOS中的最佳实践、NW.js、ClojureScript，都是很蒙圈的，跟实际的项目需求并不是很多，更多是开拓了眼界。</p></li><li><p>回家<br>来张合照<img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554016838850-2300f2ed-6aa0-48ab-aa47-50a306eba4c8.png" alt=""></p></li><li><p>夜场<br>博主回来还看来夜场的直播，@winter邀请大牛解答一些问题了。大牛都是站在很高的一个高度来看问题啦，对于博主而言，心里默默想: 恩，说的不错，对对对。但是还是自己一点点努力，脚踏实地。↖(^ω^)↗</p></li></ol><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这次跟2016 css大会时间上冲突了，从知乎上看<a href="https://www.zhihu.com/question/53068799#answer-50120429" target="_blank" rel="noopener">参加2016年12月17日广州第三届 CSS Conf 大会是个什么样的体验？</a>，有很多写干货的，期待后面视频再学习下。</p><h1 id="干货"><a href="#干货" class="headerlink" title="干货"></a>干货</h1><p>其实在d2前一天，@徐飞大大，来我司给我们分享他的数据流的干货。这里结合博主的一些想法，记录下来。</p><h2 id="过程"><a href="#过程" class="headerlink" title="过程"></a>过程</h2><p>徐飞大大是基于teambition实际业务出发的，这也是他之前入职teambition的原因。teambition的任务管理产品，涉及了很多元数据的组合。博主简单可以举例为个人信息、任务信息、任务参与人员信息。一个任务可以多个人员参与，一个人员也可以参与多个任务。这是日常中最常用的操作了。</p><p>从这实际项目中，徐飞大大提出以下几点</p><ol><li><p>同步和异步<br>同步和异步代码写法是不一致的，经常很多人会在处理回调的时候变的难受。怎么将同步和异步代码保持一致呢？</p></li><li><p>数据更新和拉取<br>一个用户更新了用户信息，怎么将用户信息发送给整个应用，同时要保证其他用户在使用的过程中，用户的信息也要保持最新的。这里面涉及到我们经常遇到的问题，就是数据的更新，一般情况下，博主会自己去触发请求，然后再更新视图。置于在推送信息，也就是保证共享信息的用户看到最新的数据，需要后端进行推送数据，而博主这边场景不多，一般前端轮训就能够满足。这2种数据方式的写法是不一样的，怎么保持一致呢？</p></li><li><p>数据组合<br>这里徐飞大大说了一个数据管道的一个概念，按照博主的理解，一个要展示的数据，进过好几层的组合加工，由最开始的纯粹数据一道一道的组合，最终组合成想要的数据。<br>如图所示的管道组合<img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554016746983-f3315dad-ca68-4c6f-9b5d-d448de2ac7f3.png" alt=""><br>由于博主的产品也会存在数据组合的情况，一般情况下，博主会自己进行组合数据，数据更新也会‘暴力’的全部更新，这样子实施简单。但是teambition里面的数据更新频繁，而且涉及到很多其它数据。怎么做才能更好的解决呢？<br>徐飞大大采用RxJs的数据表达式，比如D = A + B + C，RxJs会取ABC的最新数据，这就方便了上层调用数据。其实导致这个原因是由于后端没有去做接口合并，有能力可以增加个node层，用来做接口合并，这样ABC的数据前端只要一个接口就完事了。</p></li><li><p>数据规则<br>一个表格排序筛选，这个是一个正常的业务场景。但是在新的数据来了之后，该怎么做？徐飞大大提到了RxJS懒执行，用于解决此场景。其实在博主看来这个数据规则也是要看产品层次怎么做了，有时是要保持原有的规则，有时是重新重置参数回到最开始的规则。</p></li></ol><h2 id="MVVM"><a href="#MVVM" class="headerlink" title="MVVM"></a>MVVM</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/jpeg/103994/1554016755220-9383d7b6-6ce3-4370-9901-cfdd60bb215b.jpeg" alt=""><br>徐飞大大说明了MVVM的实际场景，M(数据源)-&gt;VM(视图控制)-&gt;V(展示)。这里就能很好的分析出M，其实还可以分为上层需要的数据也就是最终要的数据，还有未上层提供数据的数据源层，这样做就保证了上层很轻，对上层的框架依赖性就很少。使得业务框架能够保持中立。<br>而最终成本也在于数据源的维护和管理。这里也存在着一个问题，怎么保证数据源的完整性以及可维护性。虽然徐飞大大在前面通过RxJs来解决前面几个问题，但是实际项目中还是有很多人一起维护，所以要有团队约束，才能实施起来。比如说我上层有个小需求，可以直接通过ajax去获取数据了，就跳过了数据源了。o(╯□╰)o</p><h2 id="总结-1"><a href="#总结-1" class="headerlink" title="总结"></a>总结</h2><p>总体来说，博主可能在这段划船时间过后，去看看RxJs，能够对博主的业务场景有所帮助。增加数据处理层，用于管理业务，将视图层做轻做薄！↖(^ω^)↗</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;  2016年12月17号，博主去参加了d2，想写点记录。但是动手写的时候，发现其实没啥好写的。还是直接看知乎很多人的回答吧！&lt;a href=&quot;https://www.zhihu.com/question/52777303&quot; target=&quot;_blank&quot; rel=&quot;noo
      
    
    </summary>
    
      <category term="总结" scheme="http://xiaoqiang730730.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="沙龙分享" scheme="http://xiaoqiang730730.github.io/tags/%E6%B2%99%E9%BE%99%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>pre-commit</title>
    <link href="http://xiaoqiang730730.github.io/2016/11/04/pre-commit/"/>
    <id>http://xiaoqiang730730.github.io/2016/11/04/pre-commit/</id>
    <published>2016-11-04T13:40:30.000Z</published>
    <updated>2019-03-31T07:37:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>我们都知道接手一个项目是有多么的痛苦<img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554017560701-041c6191-5fa0-4a79-9606-61092798192d.png" alt="">，没有文档，代码分格等等问题都不说了。今天说的‘pre-commit’就是来帮助大家来检测代码的。</p><h1 id="为什么要检测代码"><a href="#为什么要检测代码" class="headerlink" title="为什么要检测代码"></a>为什么要检测代码</h1><p><code>codereview</code>是一个很费事，费时的事情，尤其在项目紧张期根本没有时间去做，而且说别人代码咋样咋样，但是被别人说自己的代码的时候，都不是太好！除非让老大来做<code>codereview</code>。但是老大一般都没时间的！所以写个脚本来检测代码，符合规范，开（zhuang）心（bi）敲代码。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554016990824-b512550c-feca-42cf-86fd-ad288ed1fead.png" alt=""></p><h1 id="pre-commit"><a href="#pre-commit" class="headerlink" title="pre-commit"></a>pre-commit</h1><p>顾名思义’pre-commit‘，就是在代码提交之前做些东西，比如代码打包，代码检测，称之为钩子（hook）。可以理解为回调好了，在commit之前执行一个函数（callback）。这个函数成功执行完之后，再继续commit，但是失败之后就阻止commit了。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554017803102-34ff0e6f-9a2b-467f-a5e5-4239720fde49.png" alt=""></p><p>在.git-&gt;hooks-&gt;下面有个pre-commit.sample*，这个里面就是默认的函数(脚本)样本。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/sh</span><br><span class="line">#</span><br><span class="line"># An example hook script to verify what is about to be committed.</span><br><span class="line"># Called by &quot;git commit&quot; with no arguments.  The hook should</span><br><span class="line"># exit with non-zero status after issuing an appropriate message if</span><br><span class="line"># it wants to stop the commit.</span><br><span class="line">#</span><br><span class="line"># To enable this hook, rename this file to &quot;pre-commit&quot;.</span><br><span class="line"></span><br><span class="line">if git rev-parse --verify HEAD &gt;/dev/null 2&gt;&amp;1</span><br><span class="line">then</span><br><span class="line">against=HEAD</span><br><span class="line">else</span><br><span class="line"># Initial commit: diff against an empty tree object</span><br><span class="line">against=4b825dc642cb6eb9a060e54bf8d69288fbee4904</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># If you want to allow non-ASCII filenames set this variable to true.</span><br><span class="line">allownonascii=$(git config --bool hooks.allownonascii)</span><br><span class="line"></span><br><span class="line"># Redirect output to stderr.</span><br><span class="line">exec 1&gt;&amp;2</span><br><span class="line"></span><br><span class="line"># Cross platform projects tend to avoid non-ASCII filenames; prevent</span><br><span class="line"># them from being added to the repository. We exploit the fact that the</span><br><span class="line"># printable range starts at the space character and ends with tilde.</span><br><span class="line">if [ &quot;$allownonascii&quot; != &quot;true&quot; ] &amp;&amp;</span><br><span class="line"># Note that the use of brackets around a tr range is ok here, (it&apos;s</span><br><span class="line"># even required, for portability to Solaris 10&apos;s /usr/bin/tr), since</span><br><span class="line"># the square bracket bytes happen to fall in the designated range.</span><br><span class="line">test $(git diff --cached --name-only --diff-filter=A -z $against |</span><br><span class="line">  LC_ALL=C tr -d &apos;[ -~]\0&apos; | wc -c) != 0</span><br><span class="line">then</span><br><span class="line">cat &lt;&lt;\EOF</span><br><span class="line">Error: Attempt to add a non-ASCII file name.</span><br><span class="line"></span><br><span class="line">This can cause problems if you want to work with people on other platforms.</span><br><span class="line"></span><br><span class="line">To be portable it is advisable to rename the file.</span><br><span class="line"></span><br><span class="line">If you know what you are doing you can disable this check using:</span><br><span class="line"></span><br><span class="line">  git config hooks.allownonascii true</span><br><span class="line">EOF</span><br><span class="line">exit 1</span><br><span class="line">fi</span><br><span class="line"></span><br><span class="line"># If there are whitespace errors, print the offending file names and fail.</span><br><span class="line">exec git diff-index --check --cached $against --</span><br></pre></td></tr></table></figure><p>这里面应该是一段shell脚本，博主不懂shell脚本。这可怎么办呢？<img src="https://cdn.nlark.com/yuque/0/2019/jpeg/103994/1554017608201-363d2cb3-a6b1-492f-b4e5-8062c53b5e22.jpeg" alt=""></p><h1 id="npm-script"><a href="#npm-script" class="headerlink" title="npm script"></a>npm script</h1><p>之前在掘金里面看到一篇<a href="http://elijahmanor.com/npm-precommit-scripts/" target="_blank" rel="noopener">Run npm scripts in a git pre-commit Hook</a>, 可以利用npm script来做脚本。</p><h2 id="安装pre-commit"><a href="#安装pre-commit" class="headerlink" title="安装pre-commit"></a>安装pre-commit</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install pre-commit --save-dev</span><br></pre></td></tr></table></figure><h2 id="修改package-json"><a href="#修改package-json" class="headerlink" title="修改package.json"></a>修改package.json</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;test&quot;: &quot;npm -v &amp;&amp; node -v&quot;,</span><br><span class="line">    &quot;start&quot;: &quot;node index.js&quot;,</span><br><span class="line">    &quot;eslint&quot;: &quot;node check.js&quot; // 检查的脚本</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;pre-commit&quot;: [</span><br><span class="line">    &quot;eslint&quot; // 与scripts中的脚本名称一一对应</span><br><span class="line">  ],</span><br></pre></td></tr></table></figure><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>按照之前的那篇文章，接下来更改某个文件，应该是可以执行check脚本了，但是博主window并没有pre-commit。</p><p>在<a href="https://github.com/observing/pre-commit/issues/72" target="_blank" rel="noopener">github上找到了原因</a>, 因为在window下pre-commit npm，由于权限问题，导致无法在hooks文件下生成文件。</p><p>需要以管理员打开cmd，执行<code>node ./node_modules/pre-commit/install.js</code>就可以了。o(╯□╰)o</p><h1 id="检测脚本check"><a href="#检测脚本check" class="headerlink" title="检测脚本check"></a>检测脚本check</h1><h2 id="隐患检测"><a href="#隐患检测" class="headerlink" title="隐患检测"></a>隐患检测</h2><p>博主一开始的思路就是使用eslint检测潜在的错误，由于eslint比较严格，一下子会有很多的error，可以在项目里面新建<code>.eslintrc</code>文件, 用来覆盖默认的严格的eslint rules。</p><p>但是博主又有个问题了！就是检测代码的时候，由于引用是第3方的库，比如框架、组件、ui库等等。这些应该不需要检测的，不要影响项目本身的代码。这里就需要在项目里新建个<code>.eslintignore</code>文件，用来忽略检测的文件夹。</p><p>这个时候执行<code>eslint ./ --cache</code>,会有很多warnings，巴拉巴拉一大推，o(╯□╰)o。参考<a href="http://eslint.org/docs/user-guide/command-line-interface#handling-warnings" target="_blank" rel="noopener">ESLint配置</a>，执行<code>eslint ./ --cache --quiet</code>,就可以只报出error的信息了。到项目后期，可以慢慢将eslint越来越严格，甚至warn也不允许。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> exec = <span class="built_in">require</span>(<span class="string">'child_process'</span>).exec;</span><br><span class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">'fs'</span>);</span><br><span class="line"><span class="keyword">var</span> errTip = [<span class="string">'还存在很多错误的地方哦！，避免隐患，还是现在改了吧！'</span>, <span class="string">'哎呀呀！还有错误哦！'</span>];</span><br><span class="line"><span class="keyword">var</span> successTip = [<span class="string">'不错哦！加油！'</span>, <span class="string">'赞！'</span>, <span class="string">'棒棒哒！'</span>];</span><br><span class="line"><span class="keyword">var</span> lint = <span class="function"><span class="keyword">function</span>(<span class="params">cb</span>) </span>&#123;</span><br><span class="line">    exec(<span class="string">'eslint ./ --cache --quiet'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">error, stdout, stderr</span>) </span>&#123;<span class="comment">// 通过node子进程执行命令</span></span><br><span class="line">        <span class="keyword">if</span>(stdout) &#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'\x1B[31m%s'</span>,errTip[<span class="built_in">Math</span>.floor(errTip.length*<span class="built_in">Math</span>.random())]);</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">'\x1B[37m'</span>, stdout);<span class="comment">//输出eslint错误信息</span></span><br><span class="line">            cb(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        cb(<span class="number">0</span>);</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> taskList = [lint];</span><br><span class="line"><span class="comment">// 执行检查</span></span><br><span class="line"><span class="keyword">var</span> task = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!taskList.length) &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'\x1B[32m%s'</span>, successTip[<span class="built_in">Math</span>.floor(successTip.length*<span class="built_in">Math</span>.random())]);</span><br><span class="line">        process.exit(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">var</span> func = taskList.shift();</span><br><span class="line">    func(<span class="function"><span class="keyword">function</span>(<span class="params">pass</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(pass === <span class="number">1</span>) &#123;</span><br><span class="line">            process.exit(<span class="number">1</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        task();</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> startTask = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'开始检查代码咯！O(∩_∩)O~\n'</span>);</span><br><span class="line">    task();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 执行检查</span></span><br><span class="line">startTask();</span><br></pre></td></tr></table></figure><h2 id="规范检测"><a href="#规范检测" class="headerlink" title="规范检测"></a>规范检测</h2><p>除了一些隐患要检测，还可能要检测一些代码规范，tab键和空格键乱用等等，这个适合各个团队不同的情况。</p><p>但是现在一下子接手个项目，一下子全部去改造有点不现实。试想能不能只对修改的文件进行检查？其实是可以的。</p><p>通过<code>git diff HEAD --name-only --diff-filter=ACMR</code>命令能够拿到修改过的代码的文件列表，同时我们新增了一个第三方的库，也可以再添加参数，过滤不需要的文件夹。</p><p>核心代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//name为检测的文件夹，如‘modules component static’</span><br><span class="line">exec(&apos;git diff HEAD --name-only --diff-filter=ACMR -- &apos;+name+&apos;&apos;, function(error, stdout, stderr) &#123;// 通过node子进程执行命令，</span><br><span class="line">    if(stdout) &#123;</span><br><span class="line">        array = stdout.split(&apos;\n&apos;);//通过切割换行，拿到文件列表</span><br><span class="line">        array.pop();// 去掉最后一个换行符号</span><br><span class="line">        array.forEach(function(value) &#123;</span><br><span class="line">            text = fs.readFileSync(value, &apos;utf-8&apos;);// 拿到文件内容</span><br><span class="line">            if(检测函数) &#123;</span><br><span class="line">                cb(1);</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        cb(0);</span><br><span class="line">    &#125;else &#123;</span><br><span class="line">        cb(0);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h2 id="实例检测函数"><a href="#实例检测函数" class="headerlink" title="实例检测函数"></a>实例检测函数</h2><p>博主有些点点洁癖，由于每个人的代码编辑器不一样！最简单的分格就是tab键和空格键混用。所以就写个很简单的检测tab键和空格的函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">var extraTab = function(cb) &#123;</span><br><span class="line">    var conf = JSON.parse(fs.readFileSync(&apos;./.check&apos;, &apos;utf8&apos;));</span><br><span class="line">        var name = conf.dir.join(&apos; &apos;);</span><br><span class="line">        var bTabAndSpace = conf.bTabAndSpace;</span><br><span class="line">        var array;</span><br><span class="line">        var text;</span><br><span class="line">        var checkTab = function(text, name) &#123;//检测函数</span><br><span class="line">            if(/\t\s/.test(text)) &#123;</span><br><span class="line">                console.log(&apos;\x1B[31m%s&apos;, name);</span><br><span class="line">                console.log(&apos;\x1B[37m&apos;, &apos;存在tab键和空格键乱用哦！&apos;);</span><br><span class="line">                return false;</span><br><span class="line">            &#125;</span><br><span class="line">            return true;</span><br><span class="line">        &#125;;</span><br><span class="line">        exec(&apos;git diff HEAD --name-only --diff-filter=ACMR -- &apos;+name+&apos;&apos;, function(error, stdout, stderr) &#123;// 通过node子进程执行命令</span><br><span class="line">            if(stdout) &#123;</span><br><span class="line">                array = stdout.split(&apos;\n&apos;);//通过切割换行，拿到文件列表</span><br><span class="line">                array.pop();// 去掉最后一个换行符号</span><br><span class="line">                array.forEach(function(value) &#123;</span><br><span class="line">                    text = fs.readFileSync(value, &apos;utf-8&apos;);// 拿到文件内容</span><br><span class="line">                    if(bTabAndSpace &amp;&amp; !checkTab(text, value)) &#123;//检测函数</span><br><span class="line">                        cb(1);</span><br><span class="line">                        return;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                cb(0);</span><br><span class="line">            &#125;else &#123;</span><br><span class="line">                cb(0);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>将extraTab加入taskList任务队列里面就可以了！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>如果项目实在没时间去改的话，可以<code>git commit -m &#39;XXX&#39; --no-verify</code>强制提交。也欢迎大家在<a href="https://github.com/xiaoqiang730730/pre-commit-check" target="_blank" rel="noopener">https://github.com/xiaoqiang730730/pre-commit-check</a> 提交一些规范类的代码测试！↖(^ω^)↗</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;我们都知道接手一个项目是有多么的痛苦&lt;img src=&quot;https://cdn.nlark.com/yuque/0/2019/png/103994/1554017560701-041c6191-5fa0-4a79-9606-61092798192d.png&quot; alt=&quot;&quot;&gt;
      
    
    </summary>
    
      <category term="js" scheme="http://xiaoqiang730730.github.io/categories/js/"/>
    
    
      <category term="npm scripts" scheme="http://xiaoqiang730730.github.io/tags/npm-scripts/"/>
    
      <category term="git hooks" scheme="http://xiaoqiang730730.github.io/tags/git-hooks/"/>
    
  </entry>
  
  <entry>
    <title>debuggerInit</title>
    <link href="http://xiaoqiang730730.github.io/2016/10/16/debuggerInit/"/>
    <id>http://xiaoqiang730730.github.io/2016/10/16/debuggerInit/</id>
    <published>2016-10-16T06:59:25.000Z</published>
    <updated>2019-03-17T12:11:11.000Z</updated>
    
    <content type="html"><![CDATA[<p>在测试过程中，有些问题看似是前端的问题，但因为是在界面上错误，一般测试都会把错误指向给前端，而其中很多的接口错误，服务错误，都应该让后端来解决。为了更准确的定位问题，最近给测试工程师讲了一些前端code debugger。<a href="http://yjq520.coding.me/debuggerinit20161016/" target="_blank" rel="noopener">ppt</a></p><h1 id="先导"><a href="#先导" class="headerlink" title="先导"></a>先导</h1><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552823227001-e98c3f69-50b2-4206-9d3f-67ca09e517a6.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552823251589-40cd5e8b-767e-4964-8a78-15fe1228edf9.png" alt=""></p><p>这个时候开发会怎么想呢？</p><ul><li>网络问题</li><li>设备问题</li><li>接口问题</li><li>后端数据问题</li><li>前端处理问题</li></ul><p>为了这么多不确定因素，需要更精确的定位问题所在。</p><h1 id="前后接口标准"><a href="#前后接口标准" class="headerlink" title="前后接口标准"></a>前后接口标准</h1><p>现在很多项目都是前后分离的，各家公司都有自己的标准。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// 错误规则</span></span><br><span class="line"><span class="keyword">var</span> resultRule = &#123;</span><br><span class="line"><span class="number">1</span>: <span class="string">'success'</span>,</span><br><span class="line"><span class="number">2</span>: <span class="string">'参数异常'</span>,</span><br><span class="line"><span class="number">3</span>: <span class="string">'服务端运行异常'</span>,</span><br><span class="line"><span class="number">4</span>: <span class="string">'服务端内部错误'</span>,</span><br><span class="line"><span class="number">5</span>: <span class="string">'服务端内部调用失败'</span>,</span><br><span class="line"><span class="number">6</span>: <span class="string">'淘宝服务调用失败'</span>,</span><br><span class="line"><span class="number">7</span>: <span class="string">'调用内部程序失败'</span>,</span><br><span class="line"><span class="number">8</span>: <span class="string">'用户没有权限'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 后端返回数据</span></span><br><span class="line">&#123;</span><br><span class="line">result: <span class="number">100</span>, <span class="comment">// 规则</span></span><br><span class="line">data: &#123;&#125; <span class="comment">// 数据</span></span><br><span class="line">message: <span class="string">'string'</span> <span class="comment">// 错误信息</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>所以一旦后端返回的数据中result不是以1开始的，就是其它错误了。也就是说，就直接找后端了。O(∩_∩)O哈哈~</p><h1 id="常见http状态码"><a href="#常见http状态码" class="headerlink" title="常见http状态码"></a>常见http状态码</h1><p>对于web开发而言，状态码要有一定的熟悉度。</p><ol><li>200 表示响应成功</li><li>404 表示没有资源</li><li>502 Bad Gateway<br>状态码有很多，很多时候都记不住的，参考月影大大<a href="https://www.h5jun.com/post/choosing-an-http-status-code-stop-making-it-hard-8211-racksburg.html" target="_blank" rel="noopener">【译】选择一个 HTTP 状态码不再是一件难事 – Racksburg</a>，查查手册就可以了。</li></ol><h1 id="查看api数据"><a href="#查看api数据" class="headerlink" title="查看api数据"></a>查看api数据</h1><p>通过页面F12打开debugger工具（千牛不允许打开debugger工具，需要负责人设置白名单）</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552823263125-6a36a733-dbbb-4c4c-b6f0-95abb077daa1.png" alt=""></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552823277197-7fb27016-b316-45da-9631-95c26accc085.png" alt=""></p><h1 id="pc抓包"><a href="#pc抓包" class="headerlink" title="pc抓包"></a>pc抓包</h1><ol><li>安装fiddler（mac下安装charles）, 使用其默认的配置即可</li><li>打开浏览器的Internet选项-&gt;连接-&gt;局域网设置-&gt;代理服务器(填写ip和fidder默认端口8888)</li><li>fiddler捕捉到数据包</li></ol><h2 id="Internet配置"><a href="#Internet配置" class="headerlink" title="Internet配置"></a>Internet配置</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552823289209-f3551294-4066-44b1-9076-39006754ef50.png" alt=""></p><h2 id="fiddler"><a href="#fiddler" class="headerlink" title="fiddler"></a>fiddler</h2><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552823301740-f960b828-954c-4c2c-8f8a-d56623278fcc.png" alt=""></p><h2 id="fidder替换文件"><a href="#fidder替换文件" class="headerlink" title="fidder替换文件"></a>fidder替换文件</h2><p>对于前端而言，在开发的过程中，要用本地的js文件替换掉线上的js文件。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552823367445-991e0601-a122-4040-9cf6-8d7e197e21d6.png" alt=""></p><h2 id="fidder替换文件（2）"><a href="#fidder替换文件（2）" class="headerlink" title="fidder替换文件（2）"></a>fidder替换文件（2）</h2><p>而在前端开发的过程中要新增几个文件，但是线上又没有，每次都得对单个文件替换掉，这很麻烦。<br>fiddler提供了正则匹配。比如要将图片全部代理到本地。<br>只有设置regex:线上地址/img/(?<args>.*)$<br>替换为 本地路径\img\${args}<br><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552823379339-89c4010d-d3ba-4114-8bad-a1e11f8b92b7.png" alt=""></args></p><h1 id="千牛pc抓包"><a href="#千牛pc抓包" class="headerlink" title="千牛pc抓包"></a>千牛pc抓包</h1><ol><li>跟pc的过程类型，只是Internet配置不一样。</li><li>打开系统设置-&gt;网络-&gt;启动代理-&gt;填写代理服务器ip和端口。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552823312633-ce24c0cf-2306-4f00-93e9-0cd85a2fde74.png" alt=""></li></ol><h1 id="移动端抓包"><a href="#移动端抓包" class="headerlink" title="移动端抓包"></a>移动端抓包</h1><ol><li>手机和电脑是同一网络</li><li>电脑打开fiddler</li><li>手机设置网络代理（打开网络的高级设置-&gt;开启手动http代理-&gt;填写电脑的ip和端口)</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552823323589-74ea07c0-1e1c-4de5-9cc8-104dc8e41948.png" alt=""></p><h1 id="千牛移动抓包"><a href="#千牛移动抓包" class="headerlink" title="千牛移动抓包"></a>千牛移动抓包</h1><p>大体过程跟之前的差不多。<br>由于淘宝的图片现在都是https了，就会出现图片丢失的现象。这是因为没有安装fiddler的安全证书。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552823335262-97ddac8e-7c0f-47d0-a841-dd73350e69c0.png" alt=""></p><h2 id="安装安全证书"><a href="#安装安全证书" class="headerlink" title="安装安全证书"></a>安装安全证书</h2><p>用手机直接访问电脑代理ip和端口<br><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552823346365-34a072be-a7c2-4a2c-924d-965dad908f89.png" alt=""></p><h1 id="移动端debugger"><a href="#移动端debugger" class="headerlink" title="移动端debugger"></a>移动端debugger</h1><p>对于移动端而言，调试很麻烦。抓包只能解决接口问题，还有样式问题、其他未知问题，抓包就显得无力了！<br>推荐几篇移动调试的文章<a href="https://github.com/jieyou/remote_inspect_web_on_real_device?utm_campaign=email_admin&amp;utm_source=trigger-email&amp;utm_medium=email" target="_blank" rel="noopener">参考1</a> <a href="http://yujiangshui.com/multidevice-frontend-debug/" target="_blank" rel="noopener">参考2</a></p><p>经过各种尝试还是使用chrome inspect这个方法较方便。</p><ol><li>准备安卓手机和电脑chrome</li><li>准备翻墙工具</li><li>手机通过usb连接电脑，并开启usb调试</li><li>打开chrome，输入chrome://inspect/</li></ol><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552823355848-348b38ff-c7f1-4de5-a5ba-e12161cae3ae.png" alt=""></p><p>对于ios出现的问题，博主一般会在pc的Safari中进行调试，一般都能解决问题。</p><h1 id="问题？"><a href="#问题？" class="headerlink" title="问题？"></a>问题？</h1><h2 id="无法知道哪些是有用的数据，或者要去看哪个包？"><a href="#无法知道哪些是有用的数据，或者要去看哪个包？" class="headerlink" title="无法知道哪些是有用的数据，或者要去看哪个包？"></a>无法知道哪些是有用的数据，或者要去看哪个包？</h2><p>这个问题，其实也是开发者接手一个项目时会有的疑问。对于开发者最笨的方法就是去看源代码。最好方法就是去查阅文档了，但是很多时候，其实是没有文档的！！！</p><p>其实很好解决，就是在查看某个功能的时候，清空fiddler，然后点击一下按钮，查看下此时发生多少请求，这样缩小数据包的范围，便于更好的定位。</p><h2 id="fiddler能抓pc的包，不能抓移动的包？"><a href="#fiddler能抓pc的包，不能抓移动的包？" class="headerlink" title="fiddler能抓pc的包，不能抓移动的包？"></a>fiddler能抓pc的包，不能抓移动的包？</h2><p>在抓移动的包的时候，好像会有有个警告弹框，把弹框最外层的勾去掉，再重启试试！</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>这里只是初步的定位问题，最终还是要开发去定位到源码的！<br><a href="http://yjq520.coding.me/debuggerinit20161016/" target="_blank" rel="noopener">查看ppt</a></p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552824640103-b60da956-1c1e-4cf0-a323-69691a676477.png" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在测试过程中，有些问题看似是前端的问题，但因为是在界面上错误，一般测试都会把错误指向给前端，而其中很多的接口错误，服务错误，都应该让后端来解决。为了更准确的定位问题，最近给测试工程师讲了一些前端code debugger。&lt;a href=&quot;http://yjq520.cod
      
    
    </summary>
    
      <category term="js" scheme="http://xiaoqiang730730.github.io/categories/js/"/>
    
    
      <category term="debugger" scheme="http://xiaoqiang730730.github.io/tags/debugger/"/>
    
  </entry>
  
  <entry>
    <title>javascript深拷贝</title>
    <link href="http://xiaoqiang730730.github.io/2016/08/21/javascriptDeepClone/"/>
    <id>http://xiaoqiang730730.github.io/2016/08/21/javascriptDeepClone/</id>
    <published>2016-08-21T11:34:39.000Z</published>
    <updated>2019-03-31T07:32:01.000Z</updated>
    
    <content type="html"><![CDATA[<p>javascript深拷贝是初学者甚至有经验的开发着，都会经常遇到问题，并不能很好的理解javascript的深拷贝。</p><h1 id="深拷贝-deepClone-？"><a href="#深拷贝-deepClone-？" class="headerlink" title="深拷贝(deepClone)？"></a>深拷贝(deepClone)？</h1><p>与深拷贝相对的就是浅拷贝，很多初学者在接触这个感念的时候，是很懵逼的。<br><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554017078997-39793abf-9367-4877-84cd-5a165aad8e94.png" alt=""></p><h2 id="为啥要用深拷贝？"><a href="#为啥要用深拷贝？" class="headerlink" title="为啥要用深拷贝？"></a>为啥要用深拷贝？</h2><p>在很多情况下，我们都需要给变量赋值，给内存地址赋予一个值，但是在赋值引用值类型的时候，只是共享一个内存区域，导致赋值的时候，还跟之前的值保持一直性。<br>看一个具体的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 给test赋值了一个对象</span></span><br><span class="line"><span class="keyword">var</span> test = &#123;</span><br><span class="line">a: <span class="string">'a'</span>,</span><br><span class="line">b: <span class="string">'b'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将test赋值给test2</span></span><br><span class="line"><span class="comment">// 此时test和test2是共享了同一块内存对象，这也就是浅拷贝</span></span><br><span class="line"><span class="keyword">var</span> test2 = test;</span><br><span class="line"></span><br><span class="line">test2.a = <span class="string">'a2'</span>;</span><br><span class="line"></span><br><span class="line">test.a === <span class="string">'a2'</span><span class="comment">// 为true</span></span><br></pre></td></tr></table></figure></p><p>图解：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554017469686-40c6e153-e725-4938-b8d1-6bf5a937aecf.png" alt=""></p><p>这下就很好理解为什么引用值类型数据相互影响问题。</p><h1 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h1><p>实现一个深拷贝函数，就不得不说javascript的数值类型。</p><h2 id="判断javascript类型"><a href="#判断javascript类型" class="headerlink" title="判断javascript类型"></a>判断javascript类型</h2><p>javascript中有以下基本类型</p><table><thead><tr><th>类型</th><th>描述</th></tr></thead><tbody><tr><td>undefined</td><td>undefined类型只有一个值undefined，它是变量未被赋值时的值</td></tr><tr><td>null</td><td>null类型也只有一个值null, 它是一个空的对象引用</td></tr><tr><td>Boolean</td><td>Boolean有两种取值true和false</td></tr><tr><td>String</td><td>它表示文本信息</td></tr><tr><td>Number</td><td>它表示数字信息</td></tr><tr><td>Object</td><td>它是一系列属性的无序集合， 包括函数Function和数组Array</td></tr></tbody></table><p>使用typeof是无法判断object和array的，这里使用Object.prototype.toString方法。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/toString#Description" target="_blank" rel="noopener">默认情况下，每个对象都会从Object上继承到toString()方法，如果这个方法没有被这个对象自身或者更接近的上层原型上的同名方法覆盖(遮蔽)，则调用该对象的toString()方法时会返回”[object type]”，这里的字符串type表示了一个对象类型</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> toString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"><span class="keyword">var</span> map = &#123;</span><br><span class="line">    <span class="string">'[object Boolean]'</span>  : <span class="string">'boolean'</span>, </span><br><span class="line">    <span class="string">'[object Number]'</span>   : <span class="string">'number'</span>, </span><br><span class="line">    <span class="string">'[object String]'</span>   : <span class="string">'string'</span>, </span><br><span class="line">    <span class="string">'[object Function]'</span> : <span class="string">'function'</span>, </span><br><span class="line">    <span class="string">'[object Array]'</span>    : <span class="string">'array'</span>, </span><br><span class="line">    <span class="string">'[object Date]'</span>     : <span class="string">'date'</span>, </span><br><span class="line">    <span class="string">'[object RegExp]'</span>   : <span class="string">'regExp'</span>, </span><br><span class="line">    <span class="string">'[object Undefined]'</span>: <span class="string">'undefined'</span>,</span><br><span class="line">    <span class="string">'[object Null]'</span>     : <span class="string">'null'</span>, </span><br><span class="line">    <span class="string">'[object Object]'</span>   : <span class="string">'object'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">return</span> map[toString.call(obj)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="实现deepClone"><a href="#实现deepClone" class="headerlink" title="实现deepClone"></a>实现deepClone</h2><p>对于非引用值类型的数值，直接赋值，而对于引用值类型（object）还需要再次遍历，递归赋值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">deepClone</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> t = type(data), o, i, ni;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(t === <span class="string">'array'</span>) &#123;</span><br><span class="line">    o = [];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( t === <span class="string">'object'</span>) &#123;</span><br><span class="line">    o = &#123;&#125;;</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(t === <span class="string">'array'</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>, ni = data.length; i &lt; ni; i++) &#123;</span><br><span class="line">        o.push(deepClone(data[i]));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>( t === <span class="string">'object'</span>) &#123;</span><br><span class="line">    <span class="keyword">for</span>( i <span class="keyword">in</span> data) &#123;</span><br><span class="line">        o[i] = deepClone(data[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> o;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有个点大家要<strong>注意</strong>下，对于function类型，博主这里是直接赋值的，还是共享一个内存值。这是因为函数更多的是完成某些功能，有个输入值和返回值，而且对于上层业务而言更多的是完成业务功能，并不需要真正将函数深拷贝。</p><p>但是function类型要怎么拷贝呢？</p><p>其实博主只想到了用new来操作一下，但是function就会执行一遍，不敢想象会有什么执行结果哦！o(╯□╰)o！其它暂时还没有什么好的想法，欢迎大家指导哦！</p><p>到这里差不多也就实现完了深拷贝，又有人觉的怎么没有实现浅拷贝呢？</p><h1 id="浅拷贝？"><a href="#浅拷贝？" class="headerlink" title="浅拷贝？"></a>浅拷贝？</h1><p>对于浅拷贝而言，可以理解为只操作一个共同的内存区域！这里会存在危险！(。﹏。*)</p><p>如果直接操作这个共享的数据，不做控制的话，会经常出现数据异常，被其它部分更改。所以应该不要直接操作数据源，给数据源封装一些方法，来对数据来进行CURD操作。</p><p>到这里估计就差不多了，但是作为一个前端，不仅仅考虑javascript本身，还得考虑到dom、浏览器等。</p><h1 id="Element类型"><a href="#Element类型" class="headerlink" title="Element类型"></a>Element类型</h1><p>来看下面代码，结果会返回啥呢？<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Object</span>.prototype.toString.call(<span class="built_in">document</span>.getElementsByTagName(<span class="string">'div'</span>)[<span class="number">0</span>])</span><br></pre></td></tr></table></figure></p><p>答案是<code>[object HTMLDivElement]</code></p><p>有时候保存了dom元素， 一不小心进行深拷贝，上面的深拷贝函数就缺少了对Element元素的判断。而判断Element元素要使用instanceof来判断。因为对于不同的标签，tostring会返回对应不同的标签的构造函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">type</span>(<span class="params">obj</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> toString = <span class="built_in">Object</span>.prototype.toString;</span><br><span class="line"><span class="keyword">var</span> map = &#123;</span><br><span class="line">    <span class="string">'[object Boolean]'</span>  : <span class="string">'boolean'</span>, </span><br><span class="line">    <span class="string">'[object Number]'</span>   : <span class="string">'number'</span>, </span><br><span class="line">    <span class="string">'[object String]'</span>   : <span class="string">'string'</span>, </span><br><span class="line">    <span class="string">'[object Function]'</span> : <span class="string">'function'</span>, </span><br><span class="line">    <span class="string">'[object Array]'</span>    : <span class="string">'array'</span>, </span><br><span class="line">    <span class="string">'[object Date]'</span>     : <span class="string">'date'</span>, </span><br><span class="line">    <span class="string">'[object RegExp]'</span>   : <span class="string">'regExp'</span>, </span><br><span class="line">    <span class="string">'[object Undefined]'</span>: <span class="string">'undefined'</span>,</span><br><span class="line">    <span class="string">'[object Null]'</span>     : <span class="string">'null'</span>, </span><br><span class="line">    <span class="string">'[object Object]'</span>   : <span class="string">'object'</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Element) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">'element'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> map[toString.call(obj)];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="其它方式？"><a href="#其它方式？" class="headerlink" title="其它方式？"></a>其它方式？</h1><ol><li>jquery的实现<br>详见 <a href="https://github.com/jquery/jquery/blob/master/src/core.js" target="_blank" rel="noopener">https://github.com/jquery/jquery/blob/master/src/core.js</a></li><li>underscore的实现<br>详见 <a href="https://github.com/jashkenas/underscore/blob/master/underscore.js" target="_blank" rel="noopener">https://github.com/jashkenas/underscore/blob/master/underscore.js</a></li><li>lodash的实现<br>详见 <a href="https://github.com/lodash/lodash/blob/master/lodash.js" target="_blank" rel="noopener">https://github.com/lodash/lodash/blob/master/lodash.js</a></li><li>JSON实现<br>先通过JSON.stringify一下，然后再JSON.parse一下，就能实现深拷贝。但是数据类型只支持基本数值类型。</li></ol><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">    a: <span class="string">'a'</span>,    </span><br><span class="line">    b: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;<span class="built_in">console</span>.log(<span class="string">'b'</span>)&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在JSON.stringify的时候就会把function给过滤了。</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">JSON</span>.stringify(obj)<span class="comment">// "&#123;"a":"a"&#125;"</span></span><br></pre></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>这里大概总结了一下深拷贝，以及怎么实现一个深拷贝。在不同的场景下，要根据业务场景，判断是否需要使用深拷贝。</p><h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><p>winter-JavaScript中的类型<br><a href="http://www.cnblogs.com/winter-cn/archive/2009/12/07/1618281.html" target="_blank" rel="noopener">http://www.cnblogs.com/winter-cn/archive/2009/12/07/1618281.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;javascript深拷贝是初学者甚至有经验的开发着，都会经常遇到问题，并不能很好的理解javascript的深拷贝。&lt;/p&gt;
&lt;h1 id=&quot;深拷贝-deepClone-？&quot;&gt;&lt;a href=&quot;#深拷贝-deepClone-？&quot; class=&quot;headerlink&quot; ti
      
    
    </summary>
    
      <category term="js" scheme="http://xiaoqiang730730.github.io/categories/js/"/>
    
    
      <category term="js" scheme="http://xiaoqiang730730.github.io/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>怎么找工作，怎么找到工作，怎么找到满意工作？</title>
    <link href="http://xiaoqiang730730.github.io/2016/08/14/work/"/>
    <id>http://xiaoqiang730730.github.io/2016/08/14/work/</id>
    <published>2016-08-14T13:29:43.000Z</published>
    <updated>2019-03-31T08:10:55.000Z</updated>
    
    <content type="html"><![CDATA[<p>很多人在找工作的过程中，总是碰壁，在<a href="https://xiaoqiang730730.github.io/2016/08/01/致现在的我-2016/">之前一篇文章中</a>讲述了我的一些个人经历。我是个普通的人，而我相信很多人都跟我一样，不是那么的有才华，也不是那么的笨，所以我的经历应该更普众化。还有就是找工作是个漫长的过程，不要急、不要急、不要急、不要急。</p><h1 id="简历"><a href="#简历" class="headerlink" title="简历"></a>简历</h1><p>简历非常非常非常非常重要，是获得面试机会的唯一途径。因为在别人不了解你的情况下，只能通过简历来看你的个人能力了。很多时候，面试官看简历比较简单，直接pass，连面试机会都没有，更不用说后面的事情了。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1552143438578-4df54de3-aa26-4010-931a-27c8d39adf63.png" alt=""></p><p>多花点时间，让自己的简历足够亮起来。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1553874888567-e0848812-4184-4e84-ab52-10e6ac4d74dc.png" alt=""></p><p><span style="font-weight:bold;color:#f00;font-size:25px;">简历是自己的名片，是自己展示才华的地方。</span></p><h2 id="简历命名"><a href="#简历命名" class="headerlink" title="简历命名"></a>简历命名</h2><p>遵循的格式是 <span style="font-weight:bold;color:#f00;font-size:25px;"><span>姓名_职位名称_工作年限.pdf</span></span></p><p>这是第一点很重要，很多人直接就是简历2个字，太简单随意了。</p><h2 id="简历格式"><a href="#简历格式" class="headerlink" title="简历格式"></a>简历格式</h2><p>网上有各种各样的格式，都是可以的。但是有些不认真的同学直接从某些招聘网站下载word简历，<strong>里面头部和底部都是网站的广告</strong>，这就会给人一种随意的感觉。</p><p>还有就是有些同学用word打开后，简历格式乱掉的，还有乱码。要是公司没那么缺人的话，那就在考验人事的耐心了，还得把格式调整调整才能打印出来。这里我就吐槽下下，之前收到某些同学的简历，就有word打开后乱的情况，要不是感觉内容还可以，就懒的内推了。</p><p>最好使用<font style="font-weight:bold;color:#f00;font-size:25px;">pdf</font>格式，这样都能兼容。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1553875102229-4d6ed314-7a60-4b5f-8b85-46921fd76a08.png" alt=""></p><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><p>之前做的都是架子，内容很重要。比如同学找我内推、或者帮忙推倒其他公司，我都会比较看重内容，毕竟是做技术的，不是很在意那些架子。但是有些同学社招直接投简历，有可能看到简历的第一个人就是人事了，前面说的架子太差的话，很容易就pass了。所以还是多花点时间，多多总结。<br>一个简历的内容可以写的东西很多，主要有以下几点</p><h3 id="基本介绍"><a href="#基本介绍" class="headerlink" title="基本介绍"></a>基本介绍</h3><p>个人信息的基本介绍：姓名、年龄、地址、联系方向、证件照等。尤其是在你求职期间联系方式一定不要换，保持联系通畅。</p><h3 id="项目"><a href="#项目" class="headerlink" title="项目"></a><font style="font-weight:bold;color:#f00;font-size:25px;">项目</font></h3><p>经历过的项目内容，简单的描述一下项目，<strong>更多的是要表达出从项目中学到了什么？遇到了什么问题？怎么解决的？能够说好这几个问题，一定是个很漂亮的简历。</strong></p><p><span style="font-weight:bold;color:#f00;font-size:25px;">不要写成工作职责</span>不要写成工作职责不要写成工作职责</p><p><span style="font-weight:bold;color:#f00;font-size:25px;">挑自己熟的项目</span> 有些工作时间长的，项目太多了，挑近期有意义的项目</p><p>举例1：<br><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1550906983239-510a5c53-2995-4d71-8987-1ebe857712df.png" alt=""></p><p>项目描述要精简，一般项目名称就清楚是个什么项目了。比如这个说是管理系统，那情况大体上面试官就知道了。</p><p>个人职责写成了工作职责，都是在说使用工具。当然博主承认一些公司需要这样标识，但是能力强的同学，会转变方向。</p><p>以<strong>我为中心</strong>视角，可以改成，我负责了什么，起到了什么作用；我做了性能优化的，具体带来多少提升；我抽离了组件，业务提供了多少效率。</p><p>这样去总结，至少简历你已经比别人突出了，更能获得面试机会。</p><p>举例2：</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1553175902036-a33a62ce-7133-47c6-863c-020839235be5.png" alt=""></p><p>项目就直接是XXXApp，没有过多的废话介绍业务，预留了链接，可以方便他人进一步了解。</p><p>简单介绍技术栈之后，很关键的是有总结性的亮点，并提供了链接，方便进一步去详细了解。</p><p>举例3：</p><blockquote><p>James Gosling, The father of Java.</p></blockquote><p>这类人的简历，就是自己的名字，已经在业界大名鼎鼎。</p><h3 id="专注职位内容"><a href="#专注职位内容" class="headerlink" title="专注职位内容"></a>专注职位内容</h3><p>对于一些应届生而言，可能不知道自己要做啥，就像当年的自己一样，就会写一个很是通用的简历，然后去海投。这是个非常不好的现象。比如投前端工程师，但是之前做的是Java，不能把做的Java项目，在简历里面无限的放大，整个简历就好像是投Java工程师似的，只能放到最后作为一个点睛的效果。</p><h3 id="页数"><a href="#页数" class="headerlink" title="页数"></a>页数</h3><p>简历页数不宜太多，顶多2页了，一般也就1页。</p><h3 id="技能"><a href="#技能" class="headerlink" title="技能"></a>技能</h3><p>很多网站会让同学填个技能，很多同学就会选择掌握程度熟练等。这种就很傻，谁敢自己保证自己能熟练掌握一个东西呢？就像一个简单的代码，在不同的环境中就会出现问题，就变成bug了。所以认真的考虑自己的技能，因为面试官会看到你写的，就会一直追你的屁股问到底，能够问死你。o(╯□╰)o</p><h3 id="我的职业定位？"><a href="#我的职业定位？" class="headerlink" title="我的职业定位？"></a><font style="font-weight:bold;color:#f00;font-size:25px;">我的职业定位</font>？</h3><p>前面的内容一般对于有经验的同学，大概就能很好理解，也就能更好的梳理自己的一些发展方向。但是应届生或者是说学生而言，其实是很迷茫的，根本不知道自己要走什么样的发展方向。博主之前也是这样子，感觉自己什么都想去做，有感觉自己什么都不会做。博主觉得这很正常，这就说明我们都是普通的。那为什么有些人很早就确定了自己的方向，就朝着自己方向一直学习下去。那是因为他们已经把自己的职业提前了，提前去了解整个行业，提前去学习自己感兴趣的知识，提前为自己的职业在做准备了。</p><h3 id="职业规划？"><a href="#职业规划？" class="headerlink" title="职业规划？"></a><font style="font-weight:bold;color:#f00;font-size:25px;">职业规划</font>？</h3><p>很多人都会为自己的人生做些规划。博主认为这些规划是必要的。比如说学生期间规划是找准自己的方向，为毕业后找工作做知识储备。这就是个规划。还有很多人在工作中，也是会有自己的规划。但是博主觉得规划始终是个计划，很多时候计划赶不上变化。而且不一定自己的一些观点说不定就会被别人改变。所以说规划要有，但要学会这去调整规划。</p><h3 id="项目没啥内容可写？"><a href="#项目没啥内容可写？" class="headerlink" title="项目没啥内容可写？"></a><font style="font-weight:bold;color:#f00;font-size:25px;">项目没啥内容可写</font>？</h3><p>这个问题是很多学生向博主反映的。其实这个问题换个角度就可以很好解答了。是不是没有项目才导致没有内容写呢？或者说项目没有自己一步一步搭起来，从而没收获呢？可推荐一下几种方式来扩展自己的项目经验。</p><ol><li><p>参加一些学校的项目。很多同学一开始都不在意这个，觉得很无所谓。其实很多时候都是这种小的项目，小的比赛，一点一点积累起来的，没有人一开始就会的。毕竟工科更多的是靠实践才能慢慢体会的。</p></li><li><p>有些同学是学其他专业的，然后对另一个专业敢兴趣。然后想<font style="font-weight:bold;color:#f00;font-size:25px;">转行</font>，但是又没有什么实践经历。这里博主可以建议跟之前一样去了解这个行业啊，因为其实很多本专业的同学也不怎么了解本专业，也是个空白。︿(￣︶￣)︿</p></li><li><p>自己学习有点累，怎么办？学校里很多老师都有项目，可以跟着老师后面做项目嘛。博主觉得这是最好了！要是没有找到老师那可以咋办呢？其实每个人都有毕设吧！很多同学都是要大四最后，随意糊弄下毕设就过了，只追求一个过的心态。其实可以在大二大三就跟某些老师商量下，提前订好课题，然后可以去追求一个优秀的毕设。这样毕设就很大了，不是一个大四末几个月就能搞定的，而且完成一个优秀的毕设，够自己忙活的了，也够自己在项目经历中表现了。</p></li></ol><p>ps:作为工科的话，很多课程都有课程设计的，很多同学不当回事。因为过了很容易，拿到优就很难。但是现在很多公司都是看动手能力的，嘴上说说是没有用的。每个专业课的课程设计就可以一点一点的培养自己的动手能力。而在工作中开发跟课设很像，都有很多前提条件，需要完成什么样子，也都有一个开发时间。而二者最大的不同就是<font style="font-weight:bold;color:#f00;font-size:25px;">课设可以及格，工作只能完美</font>。</p><p>ps2: 有同学反映，很多时候老师不够重视课设，也不提供些指导。博主也是从学生时代过来的，到现在就记得一个课设，做的还可以，其它的都忘了，一点印象都没有。博主觉得这里面的关键就是很多课程都只注重理论，不够注重实践。</p><p>博主觉得课设时间可以长一点，甚至是一半的教学时间，这样才能真正理解理论，并能自己实践。博主建议同学可以自己组织起来，可以请学长学姐帮忙！</p><p>总之多花点时间准备准备简历，当你觉得简历没有啥内容可以写的时候，说明还需再锻炼锻炼，此时更不能急躁，否则更多的是碰壁。</p><p>总之最终 简历就是等于自己，简历拿出去展示，问心无愧。</p><h1 id="投简历"><a href="#投简历" class="headerlink" title="投简历"></a>投简历</h1><p>很多同学投简历会有石沉大海的感觉，真的像在大海捞针。<img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1550938718157-a70be918-f786-4991-8fb3-0f0249b089cd.png" alt="enter description here"></p><p>还要注意投简历时机。博主之前在大四时错过了各大公司的校招，很是可惜。虽然在毕业后还厚着脸皮去参加bat的校招，当时投的是应届生，虽然at过了笔试，但还是在第一轮面试就被刷了，就是准备的不到位啊。</p><h2 id="校招"><a href="#校招" class="headerlink" title="校招"></a>校招</h2><p>校招应该是11月份和4月，比较密集，大三学生可以提前关注下，提前做好准备。因为校招相对于社招容易些，机会也很多。而且考研的同学也要关注下，毕竟考研不是最终的目的。</p><h2 id="内推"><a href="#内推" class="headerlink" title="内推"></a>内推</h2><p>其实不管社招还是校招，都可以跟公司的内部人员推荐一下，毕竟走简历系统是要慢点的。而且一般内推都是行业的人，可以的话，可以让别人<strong>提点建议</strong>来改进自己。有些公司毕竟门槛在那边，可能自己达不到，但是可以跟别人做些简单的交流，让自己可以朝着哪些方向去弥补自己的不足。</p><h2 id="怎么内推呢？"><a href="#怎么内推呢？" class="headerlink" title="怎么内推呢？"></a>怎么内推呢？</h2><p>内推关键是要去找人，套个近乎。(^o^)/~ 但是关键怎么去套近乎呢！</p><ol><li><p>阿里内推<br><a href="http://xiaoqiang730730.github.io/neitui/">查看内推流程</a></p></li><li><p>参加一些线下活动<br>在北京上海活动很多，有些公司会组织一些沙龙分享啥的，可以关注下，有经济能力情况下可以去参加参加，学习学习。之前就遇到某个同学，到线下一个活动专门找某位大牛，重新介绍自己。因为他投的简历一直没回应，但是他通过这种方式，争取到了一次面试的机会。所以在没有机会的时候，就要自己去创造一些机会。↖(^ω^)↗</p></li><li><strong>微博</strong><br>之前博主就是通过微博找到工作的。<img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1550938394834-c569684e-6d94-4fba-ac16-279faa2bd5b0.png" alt="enter description here"><br>为什么我会推荐这种方式呢？因为在不同的行业中，做的不错的人就那么些了，关注他们其实也就关注行业的一些动态和一些行情了。而且在公司急需人的时候，一般大牛都会在微博中发招聘广告啥的，这个时候，可以私信大牛，都会有一些交流机会，甚至能去大牛的公司，跟着大牛学习。<br>说了这么多，我就自己打个广告好了，关注 <font style="font-weight:bold;font-size:25px;"><a href="https://weibo.com/smallwall520" target="_blank" rel="noopener">我微博:前端-小强</a></font>，美好的事情一直会发生。</li><li>技术群<br>很多小白的经历，都会加入一些技术群，来学习技术。但是现在很多群都很水了，没有一个正在讨论技术的环境，不过博主最近加入了infoQ的技术群，感觉还不错，大家感兴趣的可以申请加入进去。<a href="/images/wechat.jpeg">微信群，加好友y838871837，备注博客</a></li></ol><h1 id="面试"><a href="#面试" class="headerlink" title="面试"></a>面试</h1><p>通过之前的一些准备，很多情况下都能获得面试的机会。</p><h2 id="笔试"><a href="#笔试" class="headerlink" title="笔试"></a>笔试</h2><p>很多公司会有一些笔试，有些同学会问笔试都考些啥？博主就分享下当年bat的校招笔试。</p><ol><li><p>腾讯笔试<br>之前不知道怎么稀里糊涂的报了个测试工程师, 博主认为当时是醉了。前2天晚上收到了信息，意思是在上海交大哪个教室参加测试笔试。博主当时就很懵逼啊，一点准备都没有啊。<br>具体说下笔试内容，依稀记得考的还是组员、数据结构、计算机网络、操作系统这几个主要科目的内容，测试专业好像没遇到。没想到稀里糊涂的进了1面，现在就记得手写了个冒泡算法，其它的都记不得了，然后挂了，具体原因也不清楚。o(╯□╰)o</p></li><li><p>百度笔试<br>这是博主厚着脸皮报的前端工程师，因为当时已经毕业了，算是应届生。记得百度好像是在上海复旦笔试的。百度的笔试内容确实是跟前端相关的，手写代码和一些伪代码，现在还有印象就是用css画个三角形。<br>博主感觉答的也是稀里糊涂的，但是就是过了。然后是1面，对方应该是个1-2年的工程师来面的。面了很多前端基础性问题，当时前端工作是顺手做的，是个半吊子，也就很自然的挂了。</p></li><li><p>阿里巴巴笔试<br>博主当年不知道是不是脑子抽了，竟然报了个数据挖掘工程师岗位，然后在线笔试题目全是算法题，蒙圈，就这么挂了。</p></li><li><p>其它公司<br>有些公司也会让招聘者先做个笔试题，很俗。这些题目网上都有，而且小公司也没必要吧，直接面试就好了。</p></li></ol><p>好像现在bat都是在线笔试，一般都是简单的筛选。重点还是后面的几轮面试吧。</p><h2 id="面试准备"><a href="#面试准备" class="headerlink" title="面试准备"></a>面试准备</h2><p>一般会自己带一份简历，防止面试官弄丢了简历，当然这种情况也比较少。</p><p>面试一定要对自己的简历里面的内容要熟，这很重要。面试官一般情况下会根据内容和你一起探讨探讨问题。</p><p>之前有人建议衣着要穿的很正经，但我觉得吧，做技术这行，穿着不是很看重，不要太邋遢就可以了。</p><h2 id="面试心态"><a href="#面试心态" class="headerlink" title="面试心态"></a>面试心态</h2><p>其实要摆正一个很重要的心态，一个求职者应该抱着学习的心态来面试，即使自己很牛逼，也不要用自己能牛的技能，反过来给面试官难堪。也吐槽下下，面试官也不要一直追着问，也要抱着一种别人不会，也给别人一些指导的心态。因为求职者也许现在能力不行，不代表以后不行，留个好印象。</p><p>其实面试是个相互交流的过程，相互学习的过程，也是相互选择的过程。</p><h2 id="面试过程"><a href="#面试过程" class="headerlink" title="面试过程"></a>面试过程</h2><ol><li>自我介绍</li></ol><p>用几句话，简单的自我介绍下。很多人其实没怎么在意，但是自我介绍其实是非常有必要的。就相当于跟一个陌生人介绍自己，很多同学没有过经验。就会在第一次面试的时候，自我介绍都吞吞吐吐的。</p><ol start="2"><li>面试交流</li></ol><p>这部分是整个面试的主体。包括面试官对个人项目经历的了解，以及基础知识的了解。一般情况下是通过交流，一问一答的模式。有些面试官会板书，写些思路出来。</p><p>面试官通常会通过简历里面的内容做些提问和探讨。如果写的内容很少，那就给面试官很大的面试范围了。而且一旦是自己弱的知识点，那不就坑逼了么！这就能体现前面准备内容的重要性。</p><ol start="3"><li>面试最后</li></ol><p>一般面试官都会问: ‘你有问题问我吗？’。其实这是个客套话。可以问问公司的发展啊，公司的文化啥的！最近听见了一个挺好笑的问题就是： ‘我刚才的表现能过吗？’类似这种问题就不要问了啊。o(╯□╰)o</p><h2 id="面试结果"><a href="#面试结果" class="headerlink" title="面试结果"></a>面试结果</h2><p>之前博主的面试经历，结果有好也有坏。我们得从失败的面试中，吸取一些面试教训，比如自己的知识储备还不够等，然后在下一次的面试中表现好。</p><h2 id="offer选择"><a href="#offer选择" class="headerlink" title="offer选择"></a>offer选择</h2><p>有些同学面试很不错，能拿到好几个offer。这个时候就会有困扰，到底选哪个？</p><p>其实说实话，这个问题也不是问题，自己的心理也是有个数了，只不过存在某些方面还不够完美。那就很好办，既然觉得还不够满意，那就继续再找找，多花点时间补充自己。最终还是取决于，自己想成为什么样的人，自己想怎么去规划未来的路的。</p><p>博主个人建议，不要太将就。从博主自我经历来看，找到自己满意的，会对未来的职业道路少走很多年。一旦将就了，其实你这次的跳槽也就意味着，并没有太大的提高，过1-2年还是会继续跳槽。</p><h2 id="offer后？"><a href="#offer后？" class="headerlink" title=" offer后？"></a><strong> <font style="font-weight:bold;color:#f00;font-size:25px;">offer后</font></strong>？</h2><p>这个问题应该是事后的事情了。有些同学反应去了新公司几天后，发现跟自己的<strong>预期很不相同</strong>。心里会在挣扎，’怎么办呢？’。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1550935568688-01632b5a-1a36-49bf-a8e3-ed9b58bc2cc0.png" alt=""></p><p>这时很多同学就会有个想法，那就是走。这样会导致<strong>频繁的跳槽</strong>，给以后HR留下吐槽的借口。那又该怎么办呢？</p><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们在选择一家公司的时候会看什么呢？还是只是将就随便找个工作呢？博主觉得找工作会看一下几点</p><ul><li>薪资<br>这个不用说，博主相信每个人都会从这个方面考虑，也是主要因素。 </li><li>能力<br>公司能不能够够自我成长，还是只是做些很普通的事。</li><li>文化<br>公司的文化氛围，舒适度，能不能工作的很开心。</li></ul><p>博主个人认为没有多少经验的同学，会更多看重第2点，为了自我的成长，现在的薪资够生活就行。而且一般企业不会说连基本生活的费用都给不了。而有些能力的同学，可能会在薪资和企业文化比较看重，因为去这公司就是施展自己的才能，为公司创造更多价值，而拿到更多报酬的。这仅仅是博主个人的一些观点，毕竟也是经历过几家公司的。</p><h3 id="解决？"><a href="#解决？" class="headerlink" title="解决？"></a>解决？</h3><p>那这种问题要如何解决呢？</p><p>博主想了想，其实有几种方法解决。</p><ul><li>其实在面试的时候，从几轮面试接触，大概能对公司有些了解，能对公司的做事程度，技术水平，大大小小都会有了解。最直接感受，面试结束后，自己回顾下面试过程，看看自己有没有收获。</li><li>可以到职业平台，问问离开公司的员工，他们的评价应该是最值得考虑的。</li></ul><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>其实每次找工作都是很累的事情，少则几个月，多则半年多的准备时间。用心去准备，用心去找工作，一步一步实现自己的目标。大家加油。</p><p>其实说了这么多，只是博主的一些个人感受了，毕竟大家每个人都是不一样的个体，都是不一样的烟火。大家加油，一起成长。</p><p><img src="https://cdn.nlark.com/yuque/0/2019/gif/103994/1550939264637-14d17eb1-b567-45a3-ad19-8812ffe87a2b.gif" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;很多人在找工作的过程中，总是碰壁，在&lt;a href=&quot;https://xiaoqiang730730.github.io/2016/08/01/致现在的我-2016/&quot;&gt;之前一篇文章中&lt;/a&gt;讲述了我的一些个人经历。我是个普通的人，而我相信很多人都跟我一样，不是那么的有才华
      
    
    </summary>
    
      <category term="总结" scheme="http://xiaoqiang730730.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="杂谈" scheme="http://xiaoqiang730730.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>实现小小的fullpage(二)</title>
    <link href="http://xiaoqiang730730.github.io/2016/08/05/fullpage2/"/>
    <id>http://xiaoqiang730730.github.io/2016/08/05/fullpage2/</id>
    <published>2016-08-05T14:53:45.000Z</published>
    <updated>2019-03-31T07:29:03.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="https://xiaoqiang730730.github.io/2016/06/03/fullpage/">之前写的一个小小的fullpage</a>,今天又来第二弹了。因为遇到了问题，值得这次记录下来。</p><h1 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h1><p>之前写的fullpage看似完美，简单易移植。但是今天测试给我提了个bug。说当滚动了一屏之后，再最大化或者最小化窗口的时候就会没有占满屏幕。<img src="https://cdn.nlark.com/yuque/0/2019/jpeg/103994/1554017322900-9d34c80b-d79e-47c4-9ae1-dacbafa8ec15.jpeg" alt="憋屈"></p><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>这个一定是缺少监听resize事件了。</p><h2 id="resize事件"><a href="#resize事件" class="headerlink" title="resize事件"></a>resize事件</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $container.find(<span class="string">'.slide'</span>).css(<span class="string">'height'</span>, $container.height() + <span class="string">'px'</span>);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>很简单。只要监听resize事件，然后将每个slide的高度给重新设置高度。</p><p>但是当前current在第二屏的时候，当最大化的时候，第一屏的高度增加了，但是外层的scrollContainer的偏移并没有改变，所以还得在调用一次page的move方法。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">window</span>).on(<span class="string">'resize'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $container.find(<span class="string">'.slide'</span>).css(<span class="string">'height'</span>, $container.height() + <span class="string">'px'</span>);</span><br><span class="line">    page.move(current);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="过渡问题"><a href="#过渡问题" class="headerlink" title="过渡问题"></a>过渡问题</h2><p>接着上面，在最大化后重新调用一次move操作。但是默认是有过渡效果的，这样用户感觉就怪怪的。所以就要去取消过渡效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">move: <span class="function"><span class="keyword">function</span>(<span class="params">index, bAnimation</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> di = -(index<span class="number">-1</span>)*$container.height();</span><br><span class="line">    page.start = +<span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line">    <span class="keyword">if</span>(di !== predi) &#123;</span><br><span class="line">        page.isScrolling = <span class="literal">true</span>;</span><br><span class="line">        <span class="keyword">if</span>(bAnimation) &#123;</span><br><span class="line">            $scroll.removeClass(<span class="string">'transition'</span>);</span><br><span class="line">            $scroll.css(<span class="string">'transform'</span>, <span class="string">'translateY('</span>+di+<span class="string">'px)'</span>);</span><br><span class="line">            page.isScrolling = <span class="literal">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            $scroll.addClass(<span class="string">'transition'</span>);</span><br><span class="line">            $scroll.css(<span class="string">'transform'</span>, <span class="string">'translateY('</span>+di+<span class="string">'px)'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        predi = di;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        page.isScrolling = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>move操作做了几点优化</p><ol><li>增加predi用来保留之前的偏移值。因为在第一屏时，最大化窗口。其实是没有发生滚动的。</li><li>将过渡效果提取到transition css类中。</li><li>增加bAnimation参数，用来控制是否过渡。</li></ol><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><p>在实际项目中不可能为了这一点点需求，而引入一个完整的fullpage库。而自己造简单的轮子也不可能考虑到很全面。只是对于这个项目很适合也能满足。而遇到问题，尽量做简单处理，便于维护。</p><p><a href="https://xiaoqiang730730.github.io/resources/demo/fullpage/index.html">完整例子http://xiaoqiang730730.github.io/resources/demo/fullpage/index.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;a href=&quot;https://xiaoqiang730730.github.io/2016/06/03/fullpage/&quot;&gt;之前写的一个小小的fullpage&lt;/a&gt;,今天又来第二弹了。因为遇到了问题，值得这次记录下来。&lt;/p&gt;
&lt;h1 id=&quot;问题&quot;&gt;&lt;a href
      
    
    </summary>
    
      <category term="js" scheme="http://xiaoqiang730730.github.io/categories/js/"/>
    
    
      <category term="css" scheme="http://xiaoqiang730730.github.io/tags/css/"/>
    
      <category term="fullpage" scheme="http://xiaoqiang730730.github.io/tags/fullpage/"/>
    
      <category term="transform" scheme="http://xiaoqiang730730.github.io/tags/transform/"/>
    
      <category term="transition" scheme="http://xiaoqiang730730.github.io/tags/transition/"/>
    
  </entry>
  
  <entry>
    <title>致现在的我-2016中</title>
    <link href="http://xiaoqiang730730.github.io/2016/08/01/%E8%87%B4%E7%8E%B0%E5%9C%A8%E7%9A%84%E6%88%91-2016/"/>
    <id>http://xiaoqiang730730.github.io/2016/08/01/致现在的我-2016/</id>
    <published>2016-08-01T14:49:05.000Z</published>
    <updated>2019-03-31T07:54:22.000Z</updated>
    
    <content type="html"><![CDATA[<p>说下最近的一些情况，现在主要负责公司的一款产品的前端工作。而每当自己停下来回想自己之前的道路，感觉时间过的好快，什么都没有留下来，所以就有想法，趁现在还能有点印象，记下来。O(∩_∩)O~</p><h1 id="毕业那年"><a href="#毕业那年" class="headerlink" title="毕业那年"></a>毕业那年</h1><p>2014年，是人生的转折点。依稀记得毕业后在上海找工作不断奔波的情景。</p><h2 id="考研失败"><a href="#考研失败" class="headerlink" title="考研失败"></a>考研失败</h2><p>2014年第一个失败就是考研没考上。现在再回过来看的时候，其实这次失败也不算是什么。更确切的是说人生的一个很小很小的点点。这里我就不细说了，到时候写个考研的回忆录吧！(￣┰￣*)</p><h2 id="毕业"><a href="#毕业" class="headerlink" title="毕业"></a>毕业</h2><p>2014年6月毕业了，现在很是感慨呢！一眨眼大学4年，也就这样过去了。大学4年学到了很多东西，但也好像没学到什么。在毕业那几天，一起拍照、一起聚餐。</p><p>反正毕业了，我也就吐槽下哈！毕业的那几天，按照学校的要求都得回学校的！作为一个乖乖学生的我，就真的傻傻的回去了，跟着后面参加了一些活动，也上台去领了一些奖。(～￣▽￣)～</p><h2 id="找工作"><a href="#找工作" class="headerlink" title="找工作"></a>找工作</h2><p>毕业之后，我就立即前往上海找工作。那段时间真的好难忘。</p><blockquote><p>有些企业，本来在学校联系好的，到了现场，面试官都不在，有点失落。我记的当年的第一站是普陀软件园吧，我就看旁边都是软件公司。我竟然主动上门，去问招不招人的。现在想想非常的后悔啊！希望年轻的盆友千万不要学我啊。</p></blockquote><blockquote><p>有些企业的面试官会追着问你的‘点’。我记得当时我还在公交车上，接到了一个面试官的电话，也没听清是哪家的。o(╯□╰)o，这点年轻朋友要注意，电话面试要找个通话清晰的时候和地点。我现在都记得当时提了点MVC、MVP和MVVM，他就追着我一直一直问。我就很尴尬好，现在我也说不清楚，更不要说当时了。所以我就对这个面试官印象很差，即使现在也不知道是谁。这个也给年轻的朋友一些提醒吧，不会的就不要说了哈！(。﹏。*)</p></blockquote><blockquote><p>有些企业的面试也好，环境也好。我记得当时有个在浦东软件园的一家公司<a href="www.isvision.com">上海银晨智能识别科技有限公司</a>，不知道现在还在不在浦东了。最后也给了offer。但是最后没有去，因为当时是做.NET开发。我的想法还是想摆脱微软，做些没做的东西。</p></blockquote><blockquote><p>最后我选择的<a href="www.daolicloud.com">道里云公司</a>。一家做云计算的小公司。云计算当时觉得很高大上的技术，一心想学，正好找到了一家公司，感觉还行。但是进入公司之后我就觉得坑逼了。云计算不是自己想的那么回事，涉及到很多知识，没有系统的培训很难进行开发的。而公司让新人做些web开发，那我就开始真正做些前端的事情了。</p></blockquote><p>最后总结下，年轻的盆友找工作其实不要心急的，慢慢来不急。做好充分的准备，不要像我什么岗位都去面试，最后什么都没面上。后面专门写个更加详情点的博文吧！让大家更好的找工作，找到工作，找到满意工作。</p><p>总的来说2014年是自己的懵懂期，觉得自己很牛逼，到头来自己什么都不是。渐渐认识到自己到底是谁，到底能够做啥，能做到什么程度。</p><h1 id="加入光云"><a href="#加入光云" class="headerlink" title="加入光云"></a>加入<a href="www.raycloud.com">光云</a></h1><p>2015年中，加入现在的公司杭州光云。怎么说呢，一开始也不了解光云。公司的<a href="https://weibo.com/u/1884764017" target="_blank" rel="noopener">前端老大</a>，是真正意义上的前端大牛。我就跟着老大慢慢学习和交流。</p><p>在光云这些日子，对我前端知识体系有了很大的帮助。</p><h2 id="初入光云"><a href="#初入光云" class="headerlink" title="初入光云"></a>初入光云</h2><p>每个人进去一家新的公司，都会有个陌生期。业务不熟悉，开发流程不清楚，就会导致一开始在新公司就会感到碰壁。<img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554017712275-ee3533ab-ef8e-411c-a645-8e4110a70b94.png" alt="一脸懵逼"></p><p>这个时候就要融入感，多跟大家伙一起交流交流。这个是最快也是最好的方式融入新环境了。</p><h2 id="成长光云"><a href="#成长光云" class="headerlink" title="成长光云"></a>成长光云</h2><p>渐渐的在光云成长起来，能承担的活也越来越多，也越来越重。</p><p>每次帮后端去切图，就喜欢忽悠后端来做前端吧；几乎每次过需求都会跟产品撕逼，尽量做的简单点，因为一个单页的功能好复杂啊；教点运营切图技巧，活动页就少了。<img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554017673322-fddc9bc3-276f-413a-a0df-ea7d3d6e1eeb.png" alt="哈哈"></p><h2 id="继续光云"><a href="#继续光云" class="headerlink" title="继续光云"></a>继续光云</h2><p>做的活越来越多，就会陷入困境，我应该怎样发展自己呢？怎么成长自己呢？或者说作为程序员的出路又是啥呢？</p><p>其实这也是很多人，在工作中渐渐会遇到的问题。在老大交流以及公司的一些培训中认知到，我们要以工程师自居，并不仅仅是个程序员。</p><p>程序员可以简单粗暴理解为是个敲键盘的人，时间长了，编程能力也会逐渐提高的。但是对于一个工程、一个项目要怎么去规划，怎么完美的布局，这就是工程师的价值所在了。</p><p>前端工程师不要把自身的视野局限在前端这个方面，还得牢牢把握住工程师这部分，这也是我不断在学习的部分。因为一个工程涉及到方方面面，公司有了现有的解决方案，得去了解为什么要去这么做，没有解决方案的可以尝试，找出适合的方案。</p><p>除此，我们还都想怎么从业务中提升自己呢？<a href="http://tostring.site/2016/07/10/2016-6-24%E6%8A%80%E6%9C%AF%E6%B4%BB%E5%8A%A8/#李靖的-“谈一谈如何在业务中成长”" target="_blank" rel="noopener">之前公司邀请的李靖分享，更好的解答了这个问题</a></p><h2 id="now？"><a href="#now？" class="headerlink" title="now？"></a>now？</h2><p>现在开始写博客了，之前是感觉自己能力太菜了，写不出什么个东西出来。</p><p>但是最近公司都招94、95的妹子了，突然感觉时间过的太快了，都不知道之前是怎么过来的，还是趁着能回忆点东西，就记录下来。后面会把之前的东西整理整理，也放到博客里面。(￣︶￣)↗</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;说下最近的一些情况，现在主要负责公司的一款产品的前端工作。而每当自己停下来回想自己之前的道路，感觉时间过的好快，什么都没有留下来，所以就有想法，趁现在还能有点印象，记下来。O(∩_∩)O~&lt;/p&gt;
&lt;h1 id=&quot;毕业那年&quot;&gt;&lt;a href=&quot;#毕业那年&quot; class=&quot;h
      
    
    </summary>
    
      <category term="总结" scheme="http://xiaoqiang730730.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="杂谈" scheme="http://xiaoqiang730730.github.io/tags/%E6%9D%82%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>2016-7-24 掘金小活动</title>
    <link href="http://xiaoqiang730730.github.io/2016/07/24/2016-7-24-%E6%8E%98%E9%87%91%E5%B0%8F%E6%B4%BB%E5%8A%A8/"/>
    <id>http://xiaoqiang730730.github.io/2016/07/24/2016-7-24-掘金小活动/</id>
    <published>2016-07-24T08:21:02.000Z</published>
    <updated>2019-03-31T07:23:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>这次活动是掘金在杭州处理一些事情，然后临时抽出时间跟大家一起聚聚的。所以整个活动的时间并不是很长。</p><h1 id="活动过程"><a href="#活动过程" class="headerlink" title="活动过程"></a>活动过程</h1><blockquote><p>羊山岁主持的一个接龙游戏。游戏就是先提问一个问题，然后随便抽号，抽到就得回答问题。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">某a: &apos;......&apos;?</span><br><span class="line">独白: a问了个问题，抽到了某女 b</span><br><span class="line">某b: &apos;刚才没听清问题？&apos;,</span><br><span class="line">某a: &apos;我的问题是你的第一次经历是怎样的？&apos;,</span><br><span class="line">独白: wwwwwwwwww，</span><br><span class="line">.....</span><br></pre></td></tr></table></figure><p>简单的相互交流下。</p><blockquote><p>接下来是阴明的简单介绍了下掘金现在正在做的，和以后正在做的事。</p></blockquote><p>对于我而言，掘金app现在已经很少打开了。一般每天都会在<a href="https://weibo.com/smallwall520/" target="_blank" rel="noopener">微博</a>上看到的，而且文章的更新频率其实没有那么的快的。所以我可以建议添加一些个人文章投稿（这里我就吐槽下，之前的文章被掘金退了，还是自己的内容不够深啊），这样能保证一些新鲜感，会提高用户打开掘金频率。</p><blockquote><p>最后是个正真的分享，讲加密的。(⊙﹏⊙)这个实在就没听的下去了。</p></blockquote><h1 id="活动期间"><a href="#活动期间" class="headerlink" title="活动期间"></a>活动期间</h1><p>芋头今天也过来了，宣传了其很强的前端团队。其实我们比他们还强，至少人数上可以碾压。</p><p>跟芋头有一些交流</p><blockquote><p>nodejs</p></blockquote><p>大搜车的nodejs经过半年多的坑（芋头说的），差不多已经完善体系了。其中有一点，他们没有前端转nodejs的工程师，都是一开始就做nodejs开发，或者是其他服务端开发转到node的。这也就能体会到nodejs对于前端而言，更多的应该是体现在工具这一层次。前端可以用nodejs来实现自动化工具、检测代码等等。真正到服务端做nodejs，那就跟前端不是一回事了。</p><blockquote><p>简历</p></blockquote><p>芋头收到的简历太多了，今天就有个被刷掉的人找上门了。当场就跟芋头聊，展示一些自己的一些作品。芋头感觉还是可以的，是自己漏掉了。<img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554016990824-b512550c-feca-42cf-86fd-ad288ed1fead.png" alt=""> 写这么多，我想说的是’芋头， 你处理不过来，就给我吧！’。</p><h1 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h1><p>一般活动都会合照的，上图。今天的妹子还是不错的哦！<br><img src="https://ww2.sinaimg.cn/mw690/9cdb6f6agw1f6538ave5gj218g0xcag5.jpg" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这次活动是掘金在杭州处理一些事情，然后临时抽出时间跟大家一起聚聚的。所以整个活动的时间并不是很长。&lt;/p&gt;
&lt;h1 id=&quot;活动过程&quot;&gt;&lt;a href=&quot;#活动过程&quot; class=&quot;headerlink&quot; title=&quot;活动过程&quot;&gt;&lt;/a&gt;活动过程&lt;/h1&gt;&lt;blockqu
      
    
    </summary>
    
      <category term="总结" scheme="http://xiaoqiang730730.github.io/categories/%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="沙龙分享" scheme="http://xiaoqiang730730.github.io/tags/%E6%B2%99%E9%BE%99%E5%88%86%E4%BA%AB/"/>
    
  </entry>
  
  <entry>
    <title>href的那些事</title>
    <link href="http://xiaoqiang730730.github.io/2016/07/17/href%E9%82%A3%E4%BA%9B%E4%BA%8B/"/>
    <id>http://xiaoqiang730730.github.io/2016/07/17/href那些事/</id>
    <published>2016-07-17T12:02:36.000Z</published>
    <updated>2019-03-31T07:30:03.000Z</updated>
    
    <content type="html"><![CDATA[<p>看个问题<code>&lt;a href=&quot;&quot;&gt;test&lt;/a&gt;</code>,此时href的值是什么呢？带着这样的疑问，开始今天的话题‘href的那些事’。</p><h1 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h1><p>为什么会有这个问题呢？<br>上周在项目中，msui会对页面a标签绑定些事件，会用到href内容。<code>href=&quot;&quot;</code>这么写，就会一直报错。因为浏览器此时获取到的href的值当前页面绝对路径。此时就会导致msui内部一直报错。</p><h1 id="href的定义"><a href="#href的定义" class="headerlink" title="href的定义"></a>href的定义</h1><p><a href="https://www.w3.org/TR/html5/links.html#links-created-by-a-and-area-elements" target="_blank" rel="noopener">w3c的定义</a></p><blockquote><p>The href attribute on a and area elements must have a value that is a valid URL potentially surrounded by spaces.<br>Note：The href attribute on a and area elements is not required; when those elements do not have href attributes they do not create hyperlinks.</p></blockquote><p>翻译过来大概的意思：</p><blockquote><p>a和area标签上的href属性，必须是一个有效的RUI地址<br>a和area标签不一定有href属性，没有href就不会触发超链接的特点</p></blockquote><h1 id="RUL"><a href="#RUL" class="headerlink" title="RUL"></a>RUL</h1><p><a href="https://www.w3.org/TR/html5/infrastructure.html#valid-url" target="_blank" rel="noopener">w3c的定义</a></p><blockquote><p>A string is a valid non-empty URL if it is a valid URL but it is not the empty string.<br>A string is a valid URL potentially surrounded by spaces if, after stripping leading and trailing whitespace from it, it is a valid URL.<br>A string is a valid non-empty URL potentially surrounded by spaces if, after stripping leading and trailing whitespace from it, it is a valid non-empty URL.</p></blockquote><p>挺拗口的，翻译不出来了！<img src="https://cdn.nlark.com/yuque/0/2019/png/103994/1554017384778-ee15a4e6-4759-4402-91c6-7b9440e853ba.png" alt="enter description here"></p><p>可以理解其中一点就是一个合法的URL不能为空。看来这个URL可以单独做个专题学习了。</p><h1 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h1><p>从href和URL上的定义就能很好的解决最开始的问题了。<code>href=&quot;&quot;</code>这种写法是不合理的，浏览器自身会对此情况做些兼容，默认是页面的绝对地址了。</p><h1 id="继续深挖href"><a href="#继续深挖href" class="headerlink" title="继续深挖href"></a>继续深挖href</h1><p>href内容不仅仅只能是表现成链接，还有很多种用法。</p><h2 id="锚点"><a href="#锚点" class="headerlink" title="锚点"></a>锚点</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"#top"</span>&gt;</span>头部<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这种方式经常用于定位。相信很多人都知道这种用法。</p><h2 id="script"><a href="#script" class="headerlink" title="script"></a>script</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"javascript:;"</span>&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我相信很多页面上有大量的这种代码。用href来执行脚本。</p><h2 id="邮件"><a href="#邮件" class="headerlink" title="邮件"></a>邮件</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"mailto:838871837@qq.com"</span>&gt;</span>发邮件给我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="tel电话"><a href="#tel电话" class="headerlink" title="tel电话"></a>tel电话</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"tel:xxxxxx"</span>&gt;</span>打电话给我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="sms信息"><a href="#sms信息" class="headerlink" title="sms信息"></a>sms信息</h2><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">"sms:xxxxxx"</span>&gt;</span>发信息给我<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>除此之外，还支持<code>ftp,file</code>等。</p><h2 id="下载文件"><a href="#下载文件" class="headerlink" title="下载文件"></a>下载文件</h2><p>最后还有个技巧就是利用href来下载文件，这个是html5新增的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=&quot;资源地址&quot; download=&quot;下载的文件名&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>最近有个需求，考虑通过前端来下载表格数据。<br>利用href和download属性。</p><p>这里只要将URL表现成数据格式<code>&quot;data:text/csv;charset=utf-8,\ufeff&quot;+表格数据</code>。这个等完成之后，再写个详细点的教程。</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p>写在最后，对于href的事情还不完整，欢迎补充补充。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看个问题&lt;code&gt;&amp;lt;a href=&amp;quot;&amp;quot;&amp;gt;test&amp;lt;/a&amp;gt;&lt;/code&gt;,此时href的值是什么呢？带着这样的疑问，开始今天的话题‘href的那些事’。&lt;/p&gt;
&lt;h1 id=&quot;问题分析&quot;&gt;&lt;a href=&quot;#问题分析&quot; clas
      
    
    </summary>
    
      <category term="html" scheme="http://xiaoqiang730730.github.io/categories/html/"/>
    
    
      <category term="html" scheme="http://xiaoqiang730730.github.io/tags/html/"/>
    
  </entry>
  
</feed>
